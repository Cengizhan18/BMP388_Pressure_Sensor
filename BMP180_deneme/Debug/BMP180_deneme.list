
BMP180_deneme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b64  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004d00  08004d00  00014d00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d48  08004d48  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004d48  08004d48  00014d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d50  08004d50  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d50  08004d50  00014d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d54  08004d54  00014d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004d58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000070  08004dc8  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08004dc8  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ece  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001649  00000000  00000000  00027f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000720  00000000  00000000  000295b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000670  00000000  00000000  00029cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000160ef  00000000  00000000  0002a348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f34  00000000  00000000  00040437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086ee6  00000000  00000000  0004a36b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1251  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002104  00000000  00000000  000d12a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004ce4 	.word	0x08004ce4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08004ce4 	.word	0x08004ce4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b974 	b.w	8000e50 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	4604      	mov	r4, r0
 8000b88:	468e      	mov	lr, r1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d14d      	bne.n	8000c2a <__udivmoddi4+0xaa>
 8000b8e:	428a      	cmp	r2, r1
 8000b90:	4694      	mov	ip, r2
 8000b92:	d969      	bls.n	8000c68 <__udivmoddi4+0xe8>
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	b152      	cbz	r2, 8000bb0 <__udivmoddi4+0x30>
 8000b9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b9e:	f1c2 0120 	rsb	r1, r2, #32
 8000ba2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ba6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000baa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bae:	4094      	lsls	r4, r2
 8000bb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb4:	0c21      	lsrs	r1, r4, #16
 8000bb6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bba:	fa1f f78c 	uxth.w	r7, ip
 8000bbe:	fb08 e316 	mls	r3, r8, r6, lr
 8000bc2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bc6:	fb06 f107 	mul.w	r1, r6, r7
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x64>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd6:	f080 811f 	bcs.w	8000e18 <__udivmoddi4+0x298>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 811c 	bls.w	8000e18 <__udivmoddi4+0x298>
 8000be0:	3e02      	subs	r6, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a5b      	subs	r3, r3, r1
 8000be6:	b2a4      	uxth	r4, r4
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf4:	fb00 f707 	mul.w	r7, r0, r7
 8000bf8:	42a7      	cmp	r7, r4
 8000bfa:	d90a      	bls.n	8000c12 <__udivmoddi4+0x92>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c04:	f080 810a 	bcs.w	8000e1c <__udivmoddi4+0x29c>
 8000c08:	42a7      	cmp	r7, r4
 8000c0a:	f240 8107 	bls.w	8000e1c <__udivmoddi4+0x29c>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c16:	1be4      	subs	r4, r4, r7
 8000c18:	2600      	movs	r6, #0
 8000c1a:	b11d      	cbz	r5, 8000c24 <__udivmoddi4+0xa4>
 8000c1c:	40d4      	lsrs	r4, r2
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e9c5 4300 	strd	r4, r3, [r5]
 8000c24:	4631      	mov	r1, r6
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d909      	bls.n	8000c42 <__udivmoddi4+0xc2>
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	f000 80ef 	beq.w	8000e12 <__udivmoddi4+0x292>
 8000c34:	2600      	movs	r6, #0
 8000c36:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	fab3 f683 	clz	r6, r3
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d14a      	bne.n	8000ce0 <__udivmoddi4+0x160>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xd4>
 8000c4e:	4282      	cmp	r2, r0
 8000c50:	f200 80f9 	bhi.w	8000e46 <__udivmoddi4+0x2c6>
 8000c54:	1a84      	subs	r4, r0, r2
 8000c56:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	469e      	mov	lr, r3
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d0e0      	beq.n	8000c24 <__udivmoddi4+0xa4>
 8000c62:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c66:	e7dd      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000c68:	b902      	cbnz	r2, 8000c6c <__udivmoddi4+0xec>
 8000c6a:	deff      	udf	#255	; 0xff
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f040 8092 	bne.w	8000d9a <__udivmoddi4+0x21a>
 8000c76:	eba1 010c 	sub.w	r1, r1, ip
 8000c7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7e:	fa1f fe8c 	uxth.w	lr, ip
 8000c82:	2601      	movs	r6, #1
 8000c84:	0c20      	lsrs	r0, r4, #16
 8000c86:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c8a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c8e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c92:	fb0e f003 	mul.w	r0, lr, r3
 8000c96:	4288      	cmp	r0, r1
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x12c>
 8000c9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x12a>
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	f200 80cb 	bhi.w	8000e40 <__udivmoddi4+0x2c0>
 8000caa:	4643      	mov	r3, r8
 8000cac:	1a09      	subs	r1, r1, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x156>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d202      	bcs.n	8000cd4 <__udivmoddi4+0x154>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f200 80bb 	bhi.w	8000e4a <__udivmoddi4+0x2ca>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	eba4 040e 	sub.w	r4, r4, lr
 8000cda:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cde:	e79c      	b.n	8000c1a <__udivmoddi4+0x9a>
 8000ce0:	f1c6 0720 	rsb	r7, r6, #32
 8000ce4:	40b3      	lsls	r3, r6
 8000ce6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cee:	fa20 f407 	lsr.w	r4, r0, r7
 8000cf2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf6:	431c      	orrs	r4, r3
 8000cf8:	40f9      	lsrs	r1, r7
 8000cfa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfe:	fa00 f306 	lsl.w	r3, r0, r6
 8000d02:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d06:	0c20      	lsrs	r0, r4, #16
 8000d08:	fa1f fe8c 	uxth.w	lr, ip
 8000d0c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d14:	fb08 f00e 	mul.w	r0, r8, lr
 8000d18:	4288      	cmp	r0, r1
 8000d1a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b8>
 8000d20:	eb1c 0101 	adds.w	r1, ip, r1
 8000d24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d28:	f080 8088 	bcs.w	8000e3c <__udivmoddi4+0x2bc>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f240 8085 	bls.w	8000e3c <__udivmoddi4+0x2bc>
 8000d32:	f1a8 0802 	sub.w	r8, r8, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	1a09      	subs	r1, r1, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d40:	fb09 1110 	mls	r1, r9, r0, r1
 8000d44:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	458e      	cmp	lr, r1
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1e2>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d58:	d26c      	bcs.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5a:	458e      	cmp	lr, r1
 8000d5c:	d96a      	bls.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4461      	add	r1, ip
 8000d62:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d66:	fba0 9402 	umull	r9, r4, r0, r2
 8000d6a:	eba1 010e 	sub.w	r1, r1, lr
 8000d6e:	42a1      	cmp	r1, r4
 8000d70:	46c8      	mov	r8, r9
 8000d72:	46a6      	mov	lr, r4
 8000d74:	d356      	bcc.n	8000e24 <__udivmoddi4+0x2a4>
 8000d76:	d053      	beq.n	8000e20 <__udivmoddi4+0x2a0>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x212>
 8000d7a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d7e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d82:	fa01 f707 	lsl.w	r7, r1, r7
 8000d86:	fa22 f306 	lsr.w	r3, r2, r6
 8000d8a:	40f1      	lsrs	r1, r6
 8000d8c:	431f      	orrs	r7, r3
 8000d8e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d92:	2600      	movs	r6, #0
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	f1c2 0320 	rsb	r3, r2, #32
 8000d9e:	40d8      	lsrs	r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa21 f303 	lsr.w	r3, r1, r3
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4301      	orrs	r1, r0
 8000dac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dbc:	0c0b      	lsrs	r3, r1, #16
 8000dbe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dc2:	fb00 f60e 	mul.w	r6, r0, lr
 8000dc6:	429e      	cmp	r6, r3
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x260>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dd6:	d22f      	bcs.n	8000e38 <__udivmoddi4+0x2b8>
 8000dd8:	429e      	cmp	r6, r3
 8000dda:	d92d      	bls.n	8000e38 <__udivmoddi4+0x2b8>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1b9b      	subs	r3, r3, r6
 8000de2:	b289      	uxth	r1, r1
 8000de4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de8:	fb07 3316 	mls	r3, r7, r6, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb06 f30e 	mul.w	r3, r6, lr
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x28a>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e00:	d216      	bcs.n	8000e30 <__udivmoddi4+0x2b0>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d914      	bls.n	8000e30 <__udivmoddi4+0x2b0>
 8000e06:	3e02      	subs	r6, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	1ac9      	subs	r1, r1, r3
 8000e0c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e10:	e738      	b.n	8000c84 <__udivmoddi4+0x104>
 8000e12:	462e      	mov	r6, r5
 8000e14:	4628      	mov	r0, r5
 8000e16:	e705      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	e6e3      	b.n	8000be4 <__udivmoddi4+0x64>
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	e6f8      	b.n	8000c12 <__udivmoddi4+0x92>
 8000e20:	454b      	cmp	r3, r9
 8000e22:	d2a9      	bcs.n	8000d78 <__udivmoddi4+0x1f8>
 8000e24:	ebb9 0802 	subs.w	r8, r9, r2
 8000e28:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	e7a3      	b.n	8000d78 <__udivmoddi4+0x1f8>
 8000e30:	4646      	mov	r6, r8
 8000e32:	e7ea      	b.n	8000e0a <__udivmoddi4+0x28a>
 8000e34:	4620      	mov	r0, r4
 8000e36:	e794      	b.n	8000d62 <__udivmoddi4+0x1e2>
 8000e38:	4640      	mov	r0, r8
 8000e3a:	e7d1      	b.n	8000de0 <__udivmoddi4+0x260>
 8000e3c:	46d0      	mov	r8, sl
 8000e3e:	e77b      	b.n	8000d38 <__udivmoddi4+0x1b8>
 8000e40:	3b02      	subs	r3, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	e732      	b.n	8000cac <__udivmoddi4+0x12c>
 8000e46:	4630      	mov	r0, r6
 8000e48:	e709      	b.n	8000c5e <__udivmoddi4+0xde>
 8000e4a:	4464      	add	r4, ip
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	e742      	b.n	8000cd6 <__udivmoddi4+0x156>

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <BMP388_Init>:

float par_t1, par_t2, par_t3;
float par_p1, par_p2, par_p3, par_p4, par_p5, par_p6, par_p7, par_p8, par_p9, par_p10, par_p11;

void BMP388_Init(void)
{
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b09f      	sub	sp, #124	; 0x7c
 8000e58:	af16      	add	r7, sp, #88	; 0x58
	// Soft reset
	uint8_t data[2] = {0xB6,0};
 8000e5a:	23b6      	movs	r3, #182	; 0xb6
 8000e5c:	83bb      	strh	r3, [r7, #28]
	I2C_writeByte(hi2c2,BMP3_I2C_ADDR_PRIM,BMP3_CMD_ADDR,&data[0],1);
 8000e5e:	4cb7      	ldr	r4, [pc, #732]	; (800113c <BMP388_Init+0x2e8>)
 8000e60:	2301      	movs	r3, #1
 8000e62:	9314      	str	r3, [sp, #80]	; 0x50
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	9313      	str	r3, [sp, #76]	; 0x4c
 8000e6a:	237e      	movs	r3, #126	; 0x7e
 8000e6c:	9312      	str	r3, [sp, #72]	; 0x48
 8000e6e:	2376      	movs	r3, #118	; 0x76
 8000e70:	9311      	str	r3, [sp, #68]	; 0x44
 8000e72:	4668      	mov	r0, sp
 8000e74:	f104 0310 	add.w	r3, r4, #16
 8000e78:	2244      	movs	r2, #68	; 0x44
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	f003 f802 	bl	8003e84 <memcpy>
 8000e80:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e84:	f000 fd70 	bl	8001968 <I2C_writeByte>

	// Enable sensors and set power mode to normal
	I2C_readByte(hi2c2,BMP3_I2C_ADDR_PRIM,BMP3_PWR_CTRL_ADDR,&data[0],1);
 8000e88:	4cac      	ldr	r4, [pc, #688]	; (800113c <BMP388_Init+0x2e8>)
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	9314      	str	r3, [sp, #80]	; 0x50
 8000e8e:	f107 031c 	add.w	r3, r7, #28
 8000e92:	9313      	str	r3, [sp, #76]	; 0x4c
 8000e94:	231b      	movs	r3, #27
 8000e96:	9312      	str	r3, [sp, #72]	; 0x48
 8000e98:	2376      	movs	r3, #118	; 0x76
 8000e9a:	9311      	str	r3, [sp, #68]	; 0x44
 8000e9c:	4668      	mov	r0, sp
 8000e9e:	f104 0310 	add.w	r3, r4, #16
 8000ea2:	2244      	movs	r2, #68	; 0x44
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f002 ffed 	bl	8003e84 <memcpy>
 8000eaa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000eae:	f000 fd85 	bl	80019bc <I2C_readByte>
	data[0] |= 0b00110011;
 8000eb2:	7f3b      	ldrb	r3, [r7, #28]
 8000eb4:	f043 0333 	orr.w	r3, r3, #51	; 0x33
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	773b      	strb	r3, [r7, #28]
	I2C_writeByte(hi2c2,BMP3_I2C_ADDR_PRIM,BMP3_PWR_CTRL_ADDR,&data[0],1);
 8000ebc:	4c9f      	ldr	r4, [pc, #636]	; (800113c <BMP388_Init+0x2e8>)
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	9314      	str	r3, [sp, #80]	; 0x50
 8000ec2:	f107 031c 	add.w	r3, r7, #28
 8000ec6:	9313      	str	r3, [sp, #76]	; 0x4c
 8000ec8:	231b      	movs	r3, #27
 8000eca:	9312      	str	r3, [sp, #72]	; 0x48
 8000ecc:	2376      	movs	r3, #118	; 0x76
 8000ece:	9311      	str	r3, [sp, #68]	; 0x44
 8000ed0:	4668      	mov	r0, sp
 8000ed2:	f104 0310 	add.w	r3, r4, #16
 8000ed6:	2244      	movs	r2, #68	; 0x44
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f002 ffd3 	bl	8003e84 <memcpy>
 8000ede:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ee2:	f000 fd41 	bl	8001968 <I2C_writeByte>



	uint8_t calib_data[BMP3_CALIB_DATA_LEN];
	I2C_readByte(hi2c2,BMP3_I2C_ADDR_PRIM,BMP3_CALIB_DATA_ADDR,calib_data,BMP3_CALIB_DATA_LEN);
 8000ee6:	4c95      	ldr	r4, [pc, #596]	; (800113c <BMP388_Init+0x2e8>)
 8000ee8:	2315      	movs	r3, #21
 8000eea:	9314      	str	r3, [sp, #80]	; 0x50
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	9313      	str	r3, [sp, #76]	; 0x4c
 8000ef0:	2331      	movs	r3, #49	; 0x31
 8000ef2:	9312      	str	r3, [sp, #72]	; 0x48
 8000ef4:	2376      	movs	r3, #118	; 0x76
 8000ef6:	9311      	str	r3, [sp, #68]	; 0x44
 8000ef8:	4668      	mov	r0, sp
 8000efa:	f104 0310 	add.w	r3, r4, #16
 8000efe:	2244      	movs	r2, #68	; 0x44
 8000f00:	4619      	mov	r1, r3
 8000f02:	f002 ffbf 	bl	8003e84 <memcpy>
 8000f06:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f0a:	f000 fd57 	bl	80019bc <I2C_readByte>

	NVM_PAR_T1 = (calib_data[1] << 8) | (calib_data[0]);
 8000f0e:	797b      	ldrb	r3, [r7, #5]
 8000f10:	021b      	lsls	r3, r3, #8
 8000f12:	b21a      	sxth	r2, r3
 8000f14:	793b      	ldrb	r3, [r7, #4]
 8000f16:	b21b      	sxth	r3, r3
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	b21b      	sxth	r3, r3
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	4b88      	ldr	r3, [pc, #544]	; (8001140 <BMP388_Init+0x2ec>)
 8000f20:	801a      	strh	r2, [r3, #0]
	NVM_PAR_T2 = (calib_data[3] << 8) | (calib_data[2]);
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	b21a      	sxth	r2, r3
 8000f28:	79bb      	ldrb	r3, [r7, #6]
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	b21b      	sxth	r3, r3
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	4b84      	ldr	r3, [pc, #528]	; (8001144 <BMP388_Init+0x2f0>)
 8000f34:	801a      	strh	r2, [r3, #0]
	NVM_PAR_T3 = (calib_data[4]);
 8000f36:	7a3b      	ldrb	r3, [r7, #8]
 8000f38:	b25a      	sxtb	r2, r3
 8000f3a:	4b83      	ldr	r3, [pc, #524]	; (8001148 <BMP388_Init+0x2f4>)
 8000f3c:	701a      	strb	r2, [r3, #0]
	NVM_PAR_P1 = (calib_data[6] << 8) | (calib_data[5]);
 8000f3e:	7abb      	ldrb	r3, [r7, #10]
 8000f40:	021b      	lsls	r3, r3, #8
 8000f42:	b21a      	sxth	r2, r3
 8000f44:	7a7b      	ldrb	r3, [r7, #9]
 8000f46:	b21b      	sxth	r3, r3
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	b21a      	sxth	r2, r3
 8000f4c:	4b7f      	ldr	r3, [pc, #508]	; (800114c <BMP388_Init+0x2f8>)
 8000f4e:	801a      	strh	r2, [r3, #0]
	NVM_PAR_P2 = (calib_data[8] << 8) | (calib_data[7]);
 8000f50:	7b3b      	ldrb	r3, [r7, #12]
 8000f52:	021b      	lsls	r3, r3, #8
 8000f54:	b21a      	sxth	r2, r3
 8000f56:	7afb      	ldrb	r3, [r7, #11]
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	b21a      	sxth	r2, r3
 8000f5e:	4b7c      	ldr	r3, [pc, #496]	; (8001150 <BMP388_Init+0x2fc>)
 8000f60:	801a      	strh	r2, [r3, #0]
	NVM_PAR_P3 = (calib_data[9]);
 8000f62:	7b7b      	ldrb	r3, [r7, #13]
 8000f64:	b25a      	sxtb	r2, r3
 8000f66:	4b7b      	ldr	r3, [pc, #492]	; (8001154 <BMP388_Init+0x300>)
 8000f68:	701a      	strb	r2, [r3, #0]
	NVM_PAR_P4 = (calib_data[10]);
 8000f6a:	7bbb      	ldrb	r3, [r7, #14]
 8000f6c:	b25a      	sxtb	r2, r3
 8000f6e:	4b7a      	ldr	r3, [pc, #488]	; (8001158 <BMP388_Init+0x304>)
 8000f70:	701a      	strb	r2, [r3, #0]
	NVM_PAR_P5 = (calib_data[12] << 8) | (calib_data[11]);
 8000f72:	7c3b      	ldrb	r3, [r7, #16]
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	b21b      	sxth	r3, r3
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	b21b      	sxth	r3, r3
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	4b76      	ldr	r3, [pc, #472]	; (800115c <BMP388_Init+0x308>)
 8000f84:	801a      	strh	r2, [r3, #0]
	NVM_PAR_P6 = (calib_data[14] << 8) | (calib_data[13]);
 8000f86:	7cbb      	ldrb	r3, [r7, #18]
 8000f88:	021b      	lsls	r3, r3, #8
 8000f8a:	b21a      	sxth	r2, r3
 8000f8c:	7c7b      	ldrb	r3, [r7, #17]
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	4313      	orrs	r3, r2
 8000f92:	b21b      	sxth	r3, r3
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	4b72      	ldr	r3, [pc, #456]	; (8001160 <BMP388_Init+0x30c>)
 8000f98:	801a      	strh	r2, [r3, #0]
	NVM_PAR_P7 = (calib_data[15]);
 8000f9a:	7cfb      	ldrb	r3, [r7, #19]
 8000f9c:	b25a      	sxtb	r2, r3
 8000f9e:	4b71      	ldr	r3, [pc, #452]	; (8001164 <BMP388_Init+0x310>)
 8000fa0:	701a      	strb	r2, [r3, #0]
	NVM_PAR_P8 = (calib_data[16]);
 8000fa2:	7d3b      	ldrb	r3, [r7, #20]
 8000fa4:	b25a      	sxtb	r2, r3
 8000fa6:	4b70      	ldr	r3, [pc, #448]	; (8001168 <BMP388_Init+0x314>)
 8000fa8:	701a      	strb	r2, [r3, #0]
	NVM_PAR_P9 = (calib_data[18] << 8) | (calib_data[17]);
 8000faa:	7dbb      	ldrb	r3, [r7, #22]
 8000fac:	021b      	lsls	r3, r3, #8
 8000fae:	b21a      	sxth	r2, r3
 8000fb0:	7d7b      	ldrb	r3, [r7, #21]
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	b21a      	sxth	r2, r3
 8000fb8:	4b6c      	ldr	r3, [pc, #432]	; (800116c <BMP388_Init+0x318>)
 8000fba:	801a      	strh	r2, [r3, #0]
	NVM_PAR_P10 = (calib_data[19]);
 8000fbc:	7dfb      	ldrb	r3, [r7, #23]
 8000fbe:	b25a      	sxtb	r2, r3
 8000fc0:	4b6b      	ldr	r3, [pc, #428]	; (8001170 <BMP388_Init+0x31c>)
 8000fc2:	701a      	strb	r2, [r3, #0]
	NVM_PAR_P11 = (calib_data[20]);
 8000fc4:	7e3b      	ldrb	r3, [r7, #24]
 8000fc6:	b25a      	sxtb	r2, r3
 8000fc8:	4b6a      	ldr	r3, [pc, #424]	; (8001174 <BMP388_Init+0x320>)
 8000fca:	701a      	strb	r2, [r3, #0]

	//float temp_var =
	par_t1 = NVM_PAR_T1/pow(2,-8);
 8000fcc:	4b5c      	ldr	r3, [pc, #368]	; (8001140 <BMP388_Init+0x2ec>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fa53 	bl	800047c <__aeabi_i2d>
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	4b67      	ldr	r3, [pc, #412]	; (8001178 <BMP388_Init+0x324>)
 8000fdc:	f7ff fbe2 	bl	80007a4 <__aeabi_ddiv>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f7ff fd62 	bl	8000ab0 <__aeabi_d2f>
 8000fec:	4603      	mov	r3, r0
 8000fee:	4a63      	ldr	r2, [pc, #396]	; (800117c <BMP388_Init+0x328>)
 8000ff0:	6013      	str	r3, [r2, #0]
	par_t2 = NVM_PAR_T2/pow(2,30);
 8000ff2:	4b54      	ldr	r3, [pc, #336]	; (8001144 <BMP388_Init+0x2f0>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff fa40 	bl	800047c <__aeabi_i2d>
 8000ffc:	f04f 0200 	mov.w	r2, #0
 8001000:	4b5f      	ldr	r3, [pc, #380]	; (8001180 <BMP388_Init+0x32c>)
 8001002:	f7ff fbcf 	bl	80007a4 <__aeabi_ddiv>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	4610      	mov	r0, r2
 800100c:	4619      	mov	r1, r3
 800100e:	f7ff fd4f 	bl	8000ab0 <__aeabi_d2f>
 8001012:	4603      	mov	r3, r0
 8001014:	4a5b      	ldr	r2, [pc, #364]	; (8001184 <BMP388_Init+0x330>)
 8001016:	6013      	str	r3, [r2, #0]
	par_t3 = NVM_PAR_T3/pow(2,48);
 8001018:	4b4b      	ldr	r3, [pc, #300]	; (8001148 <BMP388_Init+0x2f4>)
 800101a:	f993 3000 	ldrsb.w	r3, [r3]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fa2c 	bl	800047c <__aeabi_i2d>
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	4b57      	ldr	r3, [pc, #348]	; (8001188 <BMP388_Init+0x334>)
 800102a:	f7ff fbbb 	bl	80007a4 <__aeabi_ddiv>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4610      	mov	r0, r2
 8001034:	4619      	mov	r1, r3
 8001036:	f7ff fd3b 	bl	8000ab0 <__aeabi_d2f>
 800103a:	4603      	mov	r3, r0
 800103c:	4a53      	ldr	r2, [pc, #332]	; (800118c <BMP388_Init+0x338>)
 800103e:	6013      	str	r3, [r2, #0]
	par_p1 = (NVM_PAR_P1-pow(2,14))/pow(2,20);
 8001040:	4b42      	ldr	r3, [pc, #264]	; (800114c <BMP388_Init+0x2f8>)
 8001042:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fa18 	bl	800047c <__aeabi_i2d>
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	4b4f      	ldr	r3, [pc, #316]	; (8001190 <BMP388_Init+0x33c>)
 8001052:	f7ff f8c5 	bl	80001e0 <__aeabi_dsub>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	4b4c      	ldr	r3, [pc, #304]	; (8001194 <BMP388_Init+0x340>)
 8001064:	f7ff fb9e 	bl	80007a4 <__aeabi_ddiv>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4610      	mov	r0, r2
 800106e:	4619      	mov	r1, r3
 8001070:	f7ff fd1e 	bl	8000ab0 <__aeabi_d2f>
 8001074:	4603      	mov	r3, r0
 8001076:	4a48      	ldr	r2, [pc, #288]	; (8001198 <BMP388_Init+0x344>)
 8001078:	6013      	str	r3, [r2, #0]
	par_p2 = (NVM_PAR_P2-pow(2,14))/pow(2,29);
 800107a:	4b35      	ldr	r3, [pc, #212]	; (8001150 <BMP388_Init+0x2fc>)
 800107c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff f9fb 	bl	800047c <__aeabi_i2d>
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	4b41      	ldr	r3, [pc, #260]	; (8001190 <BMP388_Init+0x33c>)
 800108c:	f7ff f8a8 	bl	80001e0 <__aeabi_dsub>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4610      	mov	r0, r2
 8001096:	4619      	mov	r1, r3
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	4b3f      	ldr	r3, [pc, #252]	; (800119c <BMP388_Init+0x348>)
 800109e:	f7ff fb81 	bl	80007a4 <__aeabi_ddiv>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4610      	mov	r0, r2
 80010a8:	4619      	mov	r1, r3
 80010aa:	f7ff fd01 	bl	8000ab0 <__aeabi_d2f>
 80010ae:	4603      	mov	r3, r0
 80010b0:	4a3b      	ldr	r2, [pc, #236]	; (80011a0 <BMP388_Init+0x34c>)
 80010b2:	6013      	str	r3, [r2, #0]
	par_p3 = NVM_PAR_P3/pow(2,32);
 80010b4:	4b27      	ldr	r3, [pc, #156]	; (8001154 <BMP388_Init+0x300>)
 80010b6:	f993 3000 	ldrsb.w	r3, [r3]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff f9de 	bl	800047c <__aeabi_i2d>
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	4b37      	ldr	r3, [pc, #220]	; (80011a4 <BMP388_Init+0x350>)
 80010c6:	f7ff fb6d 	bl	80007a4 <__aeabi_ddiv>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4610      	mov	r0, r2
 80010d0:	4619      	mov	r1, r3
 80010d2:	f7ff fced 	bl	8000ab0 <__aeabi_d2f>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a33      	ldr	r2, [pc, #204]	; (80011a8 <BMP388_Init+0x354>)
 80010da:	6013      	str	r3, [r2, #0]
	par_p4 = NVM_PAR_P4/pow(2,37);
 80010dc:	4b1e      	ldr	r3, [pc, #120]	; (8001158 <BMP388_Init+0x304>)
 80010de:	f993 3000 	ldrsb.w	r3, [r3]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff f9ca 	bl	800047c <__aeabi_i2d>
 80010e8:	f04f 0200 	mov.w	r2, #0
 80010ec:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <BMP388_Init+0x358>)
 80010ee:	f7ff fb59 	bl	80007a4 <__aeabi_ddiv>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	f7ff fcd9 	bl	8000ab0 <__aeabi_d2f>
 80010fe:	4603      	mov	r3, r0
 8001100:	4a2b      	ldr	r2, [pc, #172]	; (80011b0 <BMP388_Init+0x35c>)
 8001102:	6013      	str	r3, [r2, #0]
	par_p5 = NVM_PAR_P5/pow(2,-3);
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <BMP388_Init+0x308>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff f9b7 	bl	800047c <__aeabi_i2d>
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001116:	f7ff fb45 	bl	80007a4 <__aeabi_ddiv>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4610      	mov	r0, r2
 8001120:	4619      	mov	r1, r3
 8001122:	f7ff fcc5 	bl	8000ab0 <__aeabi_d2f>
 8001126:	4603      	mov	r3, r0
 8001128:	4a22      	ldr	r2, [pc, #136]	; (80011b4 <BMP388_Init+0x360>)
 800112a:	6013      	str	r3, [r2, #0]
	par_p6 = NVM_PAR_P6/pow(2,6);
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <BMP388_Init+0x30c>)
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff f9a3 	bl	800047c <__aeabi_i2d>
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	e03d      	b.n	80011b8 <BMP388_Init+0x364>
 800113c:	20000134 	.word	0x20000134
 8001140:	2000008c 	.word	0x2000008c
 8001144:	2000008e 	.word	0x2000008e
 8001148:	20000090 	.word	0x20000090
 800114c:	20000098 	.word	0x20000098
 8001150:	2000009a 	.word	0x2000009a
 8001154:	20000091 	.word	0x20000091
 8001158:	20000092 	.word	0x20000092
 800115c:	2000009e 	.word	0x2000009e
 8001160:	200000a0 	.word	0x200000a0
 8001164:	20000093 	.word	0x20000093
 8001168:	20000094 	.word	0x20000094
 800116c:	2000009c 	.word	0x2000009c
 8001170:	20000095 	.word	0x20000095
 8001174:	20000096 	.word	0x20000096
 8001178:	3f700000 	.word	0x3f700000
 800117c:	200000a4 	.word	0x200000a4
 8001180:	41d00000 	.word	0x41d00000
 8001184:	200000a8 	.word	0x200000a8
 8001188:	42f00000 	.word	0x42f00000
 800118c:	200000ac 	.word	0x200000ac
 8001190:	40d00000 	.word	0x40d00000
 8001194:	41300000 	.word	0x41300000
 8001198:	200000b0 	.word	0x200000b0
 800119c:	41c00000 	.word	0x41c00000
 80011a0:	200000b4 	.word	0x200000b4
 80011a4:	41f00000 	.word	0x41f00000
 80011a8:	200000b8 	.word	0x200000b8
 80011ac:	42400000 	.word	0x42400000
 80011b0:	200000bc 	.word	0x200000bc
 80011b4:	200000c0 	.word	0x200000c0
 80011b8:	4b3a      	ldr	r3, [pc, #232]	; (80012a4 <BMP388_Init+0x450>)
 80011ba:	f7ff faf3 	bl	80007a4 <__aeabi_ddiv>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4610      	mov	r0, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	f7ff fc73 	bl	8000ab0 <__aeabi_d2f>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4a36      	ldr	r2, [pc, #216]	; (80012a8 <BMP388_Init+0x454>)
 80011ce:	6013      	str	r3, [r2, #0]
	par_p7 = NVM_PAR_P7/pow(2,8);
 80011d0:	4b36      	ldr	r3, [pc, #216]	; (80012ac <BMP388_Init+0x458>)
 80011d2:	f993 3000 	ldrsb.w	r3, [r3]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f950 	bl	800047c <__aeabi_i2d>
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	4b33      	ldr	r3, [pc, #204]	; (80012b0 <BMP388_Init+0x45c>)
 80011e2:	f7ff fadf 	bl	80007a4 <__aeabi_ddiv>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff fc5f 	bl	8000ab0 <__aeabi_d2f>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4a2f      	ldr	r2, [pc, #188]	; (80012b4 <BMP388_Init+0x460>)
 80011f6:	6013      	str	r3, [r2, #0]
	par_p8 = NVM_PAR_P8/pow(2,15);
 80011f8:	4b2f      	ldr	r3, [pc, #188]	; (80012b8 <BMP388_Init+0x464>)
 80011fa:	f993 3000 	ldrsb.w	r3, [r3]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f93c 	bl	800047c <__aeabi_i2d>
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	4b2c      	ldr	r3, [pc, #176]	; (80012bc <BMP388_Init+0x468>)
 800120a:	f7ff facb 	bl	80007a4 <__aeabi_ddiv>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4610      	mov	r0, r2
 8001214:	4619      	mov	r1, r3
 8001216:	f7ff fc4b 	bl	8000ab0 <__aeabi_d2f>
 800121a:	4603      	mov	r3, r0
 800121c:	4a28      	ldr	r2, [pc, #160]	; (80012c0 <BMP388_Init+0x46c>)
 800121e:	6013      	str	r3, [r2, #0]
	par_p9 = NVM_PAR_P9/pow(2,48);
 8001220:	4b28      	ldr	r3, [pc, #160]	; (80012c4 <BMP388_Init+0x470>)
 8001222:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f928 	bl	800047c <__aeabi_i2d>
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	4b25      	ldr	r3, [pc, #148]	; (80012c8 <BMP388_Init+0x474>)
 8001232:	f7ff fab7 	bl	80007a4 <__aeabi_ddiv>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	f7ff fc37 	bl	8000ab0 <__aeabi_d2f>
 8001242:	4603      	mov	r3, r0
 8001244:	4a21      	ldr	r2, [pc, #132]	; (80012cc <BMP388_Init+0x478>)
 8001246:	6013      	str	r3, [r2, #0]
	par_p10 = NVM_PAR_P10/pow(2,48);
 8001248:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <BMP388_Init+0x47c>)
 800124a:	f993 3000 	ldrsb.w	r3, [r3]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f914 	bl	800047c <__aeabi_i2d>
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <BMP388_Init+0x474>)
 800125a:	f7ff faa3 	bl	80007a4 <__aeabi_ddiv>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4610      	mov	r0, r2
 8001264:	4619      	mov	r1, r3
 8001266:	f7ff fc23 	bl	8000ab0 <__aeabi_d2f>
 800126a:	4603      	mov	r3, r0
 800126c:	4a19      	ldr	r2, [pc, #100]	; (80012d4 <BMP388_Init+0x480>)
 800126e:	6013      	str	r3, [r2, #0]
	par_p11= NVM_PAR_P11/pow(2,65);
 8001270:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <BMP388_Init+0x484>)
 8001272:	f993 3000 	ldrsb.w	r3, [r3]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f900 	bl	800047c <__aeabi_i2d>
 800127c:	f04f 0200 	mov.w	r2, #0
 8001280:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 8001284:	f7ff fa8e 	bl	80007a4 <__aeabi_ddiv>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	f7ff fc0e 	bl	8000ab0 <__aeabi_d2f>
 8001294:	4603      	mov	r3, r0
 8001296:	4a11      	ldr	r2, [pc, #68]	; (80012dc <BMP388_Init+0x488>)
 8001298:	6013      	str	r3, [r2, #0]

}
 800129a:	bf00      	nop
 800129c:	3724      	adds	r7, #36	; 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd90      	pop	{r4, r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40500000 	.word	0x40500000
 80012a8:	200000c4 	.word	0x200000c4
 80012ac:	20000093 	.word	0x20000093
 80012b0:	40700000 	.word	0x40700000
 80012b4:	200000c8 	.word	0x200000c8
 80012b8:	20000094 	.word	0x20000094
 80012bc:	40e00000 	.word	0x40e00000
 80012c0:	200000cc 	.word	0x200000cc
 80012c4:	2000009c 	.word	0x2000009c
 80012c8:	42f00000 	.word	0x42f00000
 80012cc:	200000d0 	.word	0x200000d0
 80012d0:	20000095 	.word	0x20000095
 80012d4:	200000d4 	.word	0x200000d4
 80012d8:	20000096 	.word	0x20000096
 80012dc:	200000d8 	.word	0x200000d8

080012e0 <BMP388_readData>:

float BMP388_readData(double * T, double * P)
{
 80012e0:	b5b0      	push	{r4, r5, r7, lr}
 80012e2:	b0a4      	sub	sp, #144	; 0x90
 80012e4:	af16      	add	r7, sp, #88	; 0x58
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	I2C_readByte(hi2c2,BMP3_I2C_ADDR_PRIM,BMP3_DATA_ADDR,data,6);
 80012ea:	4cc2      	ldr	r4, [pc, #776]	; (80015f4 <BMP388_readData+0x314>)
 80012ec:	2306      	movs	r3, #6
 80012ee:	9314      	str	r3, [sp, #80]	; 0x50
 80012f0:	f107 0308 	add.w	r3, r7, #8
 80012f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80012f6:	2304      	movs	r3, #4
 80012f8:	9312      	str	r3, [sp, #72]	; 0x48
 80012fa:	2376      	movs	r3, #118	; 0x76
 80012fc:	9311      	str	r3, [sp, #68]	; 0x44
 80012fe:	4668      	mov	r0, sp
 8001300:	f104 0310 	add.w	r3, r4, #16
 8001304:	2244      	movs	r2, #68	; 0x44
 8001306:	4619      	mov	r1, r3
 8001308:	f002 fdbc 	bl	8003e84 <memcpy>
 800130c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001310:	f000 fb54 	bl	80019bc <I2C_readByte>

	uint32_t uncomp_temp, uncomp_press;
	uncomp_press = (data[2] << 16) | (data[1] << 8) | (data[0]);
 8001314:	7abb      	ldrb	r3, [r7, #10]
 8001316:	041a      	lsls	r2, r3, #16
 8001318:	7a7b      	ldrb	r3, [r7, #9]
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	4313      	orrs	r3, r2
 800131e:	7a3a      	ldrb	r2, [r7, #8]
 8001320:	4313      	orrs	r3, r2
 8001322:	637b      	str	r3, [r7, #52]	; 0x34
	uncomp_temp = (data[5] << 16) | (data[4] << 8) | (data[3]);
 8001324:	7b7b      	ldrb	r3, [r7, #13]
 8001326:	041a      	lsls	r2, r3, #16
 8001328:	7b3b      	ldrb	r3, [r7, #12]
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	4313      	orrs	r3, r2
 800132e:	7afa      	ldrb	r2, [r7, #11]
 8001330:	4313      	orrs	r3, r2
 8001332:	633b      	str	r3, [r7, #48]	; 0x30

	// Temperature compensation
	float partial_data1;
	float partial_data2;
	partial_data1 = (float)(uncomp_temp-par_t1);
 8001334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001336:	ee07 3a90 	vmov	s15, r3
 800133a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800133e:	4bae      	ldr	r3, [pc, #696]	; (80015f8 <BMP388_readData+0x318>)
 8001340:	edd3 7a00 	vldr	s15, [r3]
 8001344:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001348:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	partial_data2 = (float)(partial_data1 * par_t2);
 800134c:	4bab      	ldr	r3, [pc, #684]	; (80015fc <BMP388_readData+0x31c>)
 800134e:	edd3 7a00 	vldr	s15, [r3]
 8001352:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800135a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	*T = partial_data2 + (partial_data1 * partial_data1) * par_t3;
 800135e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001362:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001366:	4ba6      	ldr	r3, [pc, #664]	; (8001600 <BMP388_readData+0x320>)
 8001368:	edd3 7a00 	vldr	s15, [r3]
 800136c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001370:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001374:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001378:	ee17 0a90 	vmov	r0, s15
 800137c:	f7ff f890 	bl	80004a0 <__aeabi_f2d>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	6879      	ldr	r1, [r7, #4]
 8001386:	e9c1 2300 	strd	r2, r3, [r1]

	double temp = *T;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	e9c7 2308 	strd	r2, r3, [r7, #32]
	// Pressure compensation
	partial_data1 = 0;
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	62fb      	str	r3, [r7, #44]	; 0x2c
	partial_data2 = 0;
 800139a:	f04f 0300 	mov.w	r3, #0
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
	float partial_data3, partial_data4, partial_out1, partial_out2;
	partial_data1 = par_p6 * temp;
 80013a0:	4b98      	ldr	r3, [pc, #608]	; (8001604 <BMP388_readData+0x324>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff f87b 	bl	80004a0 <__aeabi_f2d>
 80013aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013ae:	f7ff f8cf 	bl	8000550 <__aeabi_dmul>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4610      	mov	r0, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	f7ff fb79 	bl	8000ab0 <__aeabi_d2f>
 80013be:	4603      	mov	r3, r0
 80013c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	partial_data2 = par_p7 * temp*temp;
 80013c2:	4b91      	ldr	r3, [pc, #580]	; (8001608 <BMP388_readData+0x328>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff f86a 	bl	80004a0 <__aeabi_f2d>
 80013cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013d0:	f7ff f8be 	bl	8000550 <__aeabi_dmul>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4610      	mov	r0, r2
 80013da:	4619      	mov	r1, r3
 80013dc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013e0:	f7ff f8b6 	bl	8000550 <__aeabi_dmul>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4610      	mov	r0, r2
 80013ea:	4619      	mov	r1, r3
 80013ec:	f7ff fb60 	bl	8000ab0 <__aeabi_d2f>
 80013f0:	4603      	mov	r3, r0
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
	partial_data3 = par_p8 * temp*temp*temp;
 80013f4:	4b85      	ldr	r3, [pc, #532]	; (800160c <BMP388_readData+0x32c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f851 	bl	80004a0 <__aeabi_f2d>
 80013fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001402:	f7ff f8a5 	bl	8000550 <__aeabi_dmul>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001412:	f7ff f89d 	bl	8000550 <__aeabi_dmul>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4610      	mov	r0, r2
 800141c:	4619      	mov	r1, r3
 800141e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001422:	f7ff f895 	bl	8000550 <__aeabi_dmul>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	f7ff fb3f 	bl	8000ab0 <__aeabi_d2f>
 8001432:	4603      	mov	r3, r0
 8001434:	61fb      	str	r3, [r7, #28]
	partial_out1 = par_p5 + partial_data1 + partial_data2 + partial_data3;
 8001436:	4b76      	ldr	r3, [pc, #472]	; (8001610 <BMP388_readData+0x330>)
 8001438:	ed93 7a00 	vldr	s14, [r3]
 800143c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001440:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001444:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800144c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001450:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001454:	edc7 7a06 	vstr	s15, [r7, #24]
	partial_data1 = par_p2 * temp;
 8001458:	4b6e      	ldr	r3, [pc, #440]	; (8001614 <BMP388_readData+0x334>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f81f 	bl	80004a0 <__aeabi_f2d>
 8001462:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001466:	f7ff f873 	bl	8000550 <__aeabi_dmul>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	4610      	mov	r0, r2
 8001470:	4619      	mov	r1, r3
 8001472:	f7ff fb1d 	bl	8000ab0 <__aeabi_d2f>
 8001476:	4603      	mov	r3, r0
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
	partial_data2 = par_p3 * temp*temp;
 800147a:	4b67      	ldr	r3, [pc, #412]	; (8001618 <BMP388_readData+0x338>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff f80e 	bl	80004a0 <__aeabi_f2d>
 8001484:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001488:	f7ff f862 	bl	8000550 <__aeabi_dmul>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4610      	mov	r0, r2
 8001492:	4619      	mov	r1, r3
 8001494:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001498:	f7ff f85a 	bl	8000550 <__aeabi_dmul>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4610      	mov	r0, r2
 80014a2:	4619      	mov	r1, r3
 80014a4:	f7ff fb04 	bl	8000ab0 <__aeabi_d2f>
 80014a8:	4603      	mov	r3, r0
 80014aa:	62bb      	str	r3, [r7, #40]	; 0x28
	partial_data3 = par_p4 * temp*temp*temp;
 80014ac:	4b5b      	ldr	r3, [pc, #364]	; (800161c <BMP388_readData+0x33c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7fe fff5 	bl	80004a0 <__aeabi_f2d>
 80014b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80014ba:	f7ff f849 	bl	8000550 <__aeabi_dmul>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4610      	mov	r0, r2
 80014c4:	4619      	mov	r1, r3
 80014c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80014ca:	f7ff f841 	bl	8000550 <__aeabi_dmul>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80014da:	f7ff f839 	bl	8000550 <__aeabi_dmul>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4610      	mov	r0, r2
 80014e4:	4619      	mov	r1, r3
 80014e6:	f7ff fae3 	bl	8000ab0 <__aeabi_d2f>
 80014ea:	4603      	mov	r3, r0
 80014ec:	61fb      	str	r3, [r7, #28]
	partial_out2 = (float)uncomp_press * (par_p1 + partial_data1 + partial_data2 + partial_data3);
 80014ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014f0:	ee07 3a90 	vmov	s15, r3
 80014f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014f8:	4b49      	ldr	r3, [pc, #292]	; (8001620 <BMP388_readData+0x340>)
 80014fa:	edd3 6a00 	vldr	s13, [r3]
 80014fe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001502:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001506:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800150a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800150e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800151a:	edc7 7a05 	vstr	s15, [r7, #20]
	partial_data1 = (float)uncomp_press * (float)uncomp_press;
 800151e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001520:	ee07 3a90 	vmov	s15, r3
 8001524:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800152a:	ee07 3a90 	vmov	s15, r3
 800152e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001536:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	partial_data2 = par_p9 + par_p10 * temp;
 800153a:	4b3a      	ldr	r3, [pc, #232]	; (8001624 <BMP388_readData+0x344>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7fe ffae 	bl	80004a0 <__aeabi_f2d>
 8001544:	4604      	mov	r4, r0
 8001546:	460d      	mov	r5, r1
 8001548:	4b37      	ldr	r3, [pc, #220]	; (8001628 <BMP388_readData+0x348>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe ffa7 	bl	80004a0 <__aeabi_f2d>
 8001552:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001556:	f7fe fffb 	bl	8000550 <__aeabi_dmul>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4620      	mov	r0, r4
 8001560:	4629      	mov	r1, r5
 8001562:	f7fe fe3f 	bl	80001e4 <__adddf3>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f7ff fa9f 	bl	8000ab0 <__aeabi_d2f>
 8001572:	4603      	mov	r3, r0
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
	partial_data3 = partial_data1 * partial_data2;
 8001576:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800157a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800157e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001582:	edc7 7a07 	vstr	s15, [r7, #28]
	partial_data4 = partial_data3 + (float)uncomp_press*(float)uncomp_press*(float)uncomp_press*par_p11;
 8001586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001588:	ee07 3a90 	vmov	s15, r3
 800158c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001592:	ee07 3a90 	vmov	s15, r3
 8001596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800159a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800159e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a0:	ee07 3a90 	vmov	s15, r3
 80015a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015ac:	4b1f      	ldr	r3, [pc, #124]	; (800162c <BMP388_readData+0x34c>)
 80015ae:	edd3 7a00 	vldr	s15, [r3]
 80015b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	edc7 7a04 	vstr	s15, [r7, #16]
	*P = partial_out1 + partial_out2 + partial_data4;
 80015c2:	ed97 7a06 	vldr	s14, [r7, #24]
 80015c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80015ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80015d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d6:	ee17 0a90 	vmov	r0, s15
 80015da:	f7fe ff61 	bl	80004a0 <__aeabi_f2d>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	6839      	ldr	r1, [r7, #0]
 80015e4:	e9c1 2300 	strd	r2, r3, [r1]
}
 80015e8:	bf00      	nop
 80015ea:	eeb0 0a67 	vmov.f32	s0, s15
 80015ee:	3738      	adds	r7, #56	; 0x38
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bdb0      	pop	{r4, r5, r7, pc}
 80015f4:	20000134 	.word	0x20000134
 80015f8:	200000a4 	.word	0x200000a4
 80015fc:	200000a8 	.word	0x200000a8
 8001600:	200000ac 	.word	0x200000ac
 8001604:	200000c4 	.word	0x200000c4
 8001608:	200000c8 	.word	0x200000c8
 800160c:	200000cc 	.word	0x200000cc
 8001610:	200000c0 	.word	0x200000c0
 8001614:	200000b4 	.word	0x200000b4
 8001618:	200000b8 	.word	0x200000b8
 800161c:	200000bc 	.word	0x200000bc
 8001620:	200000b0 	.word	0x200000b0
 8001624:	200000d0 	.word	0x200000d0
 8001628:	200000d4 	.word	0x200000d4
 800162c:	200000d8 	.word	0x200000d8

08001630 <BMP388_readAltitude>:

float BMP388_readAltitude (double pressure,float sealevelhPa)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	ed87 0b02 	vstr	d0, [r7, #8]
 800163a:	ed87 1a01 	vstr	s2, [r7, #4]
	float altitude;
	pressure/=100;
 800163e:	f04f 0200 	mov.w	r2, #0
 8001642:	4b23      	ldr	r3, [pc, #140]	; (80016d0 <BMP388_readAltitude+0xa0>)
 8001644:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001648:	f7ff f8ac 	bl	80007a4 <__aeabi_ddiv>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	e9c7 2302 	strd	r2, r3, [r7, #8]
	altitude= 44330*(1-pow(pressure/sealevelhPa,0.1903));
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7fe ff23 	bl	80004a0 <__aeabi_f2d>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001662:	f7ff f89f 	bl	80007a4 <__aeabi_ddiv>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	ec43 2b17 	vmov	d7, r2, r3
 800166e:	ed9f 1b14 	vldr	d1, [pc, #80]	; 80016c0 <BMP388_readAltitude+0x90>
 8001672:	eeb0 0a47 	vmov.f32	s0, s14
 8001676:	eef0 0a67 	vmov.f32	s1, s15
 800167a:	f002 fc19 	bl	8003eb0 <pow>
 800167e:	ec53 2b10 	vmov	r2, r3, d0
 8001682:	f04f 0000 	mov.w	r0, #0
 8001686:	4913      	ldr	r1, [pc, #76]	; (80016d4 <BMP388_readAltitude+0xa4>)
 8001688:	f7fe fdaa 	bl	80001e0 <__aeabi_dsub>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	a30c      	add	r3, pc, #48	; (adr r3, 80016c8 <BMP388_readAltitude+0x98>)
 8001696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169a:	f7fe ff59 	bl	8000550 <__aeabi_dmul>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	f7ff fa03 	bl	8000ab0 <__aeabi_d2f>
 80016aa:	4603      	mov	r3, r0
 80016ac:	617b      	str	r3, [r7, #20]
	return altitude;
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	ee07 3a90 	vmov	s15, r3
}
 80016b4:	eeb0 0a67 	vmov.f32	s0, s15
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	1a36e2eb 	.word	0x1a36e2eb
 80016c4:	3fc85bc0 	.word	0x3fc85bc0
 80016c8:	00000000 	.word	0x00000000
 80016cc:	40e5a540 	.word	0x40e5a540
 80016d0:	40590000 	.word	0x40590000
 80016d4:	3ff00000 	.word	0x3ff00000

080016d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	; 0x28
 80016dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	4b27      	ldr	r3, [pc, #156]	; (8001790 <MX_GPIO_Init+0xb8>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a26      	ldr	r2, [pc, #152]	; (8001790 <MX_GPIO_Init+0xb8>)
 80016f8:	f043 0304 	orr.w	r3, r3, #4
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b24      	ldr	r3, [pc, #144]	; (8001790 <MX_GPIO_Init+0xb8>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	4b20      	ldr	r3, [pc, #128]	; (8001790 <MX_GPIO_Init+0xb8>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a1f      	ldr	r2, [pc, #124]	; (8001790 <MX_GPIO_Init+0xb8>)
 8001714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <MX_GPIO_Init+0xb8>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	4b19      	ldr	r3, [pc, #100]	; (8001790 <MX_GPIO_Init+0xb8>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a18      	ldr	r2, [pc, #96]	; (8001790 <MX_GPIO_Init+0xb8>)
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b16      	ldr	r3, [pc, #88]	; (8001790 <MX_GPIO_Init+0xb8>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	4b12      	ldr	r3, [pc, #72]	; (8001790 <MX_GPIO_Init+0xb8>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a11      	ldr	r2, [pc, #68]	; (8001790 <MX_GPIO_Init+0xb8>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <MX_GPIO_Init+0xb8>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001764:	480b      	ldr	r0, [pc, #44]	; (8001794 <MX_GPIO_Init+0xbc>)
 8001766:	f000 fdfd 	bl	8002364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800176a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800176e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001770:	2301      	movs	r3, #1
 8001772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	4619      	mov	r1, r3
 8001782:	4804      	ldr	r0, [pc, #16]	; (8001794 <MX_GPIO_Init+0xbc>)
 8001784:	f000 fc6a 	bl	800205c <HAL_GPIO_Init>

}
 8001788:	bf00      	nop
 800178a:	3728      	adds	r7, #40	; 0x28
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40023800 	.word	0x40023800
 8001794:	40020800 	.word	0x40020800

08001798 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <MX_I2C1_Init+0x50>)
 800179e:	4a13      	ldr	r2, [pc, #76]	; (80017ec <MX_I2C1_Init+0x54>)
 80017a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <MX_I2C1_Init+0x50>)
 80017a4:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <MX_I2C1_Init+0x58>)
 80017a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017a8:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <MX_I2C1_Init+0x50>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <MX_I2C1_Init+0x50>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <MX_I2C1_Init+0x50>)
 80017b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017bc:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <MX_I2C1_Init+0x50>)
 80017be:	2200      	movs	r2, #0
 80017c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <MX_I2C1_Init+0x50>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017c8:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <MX_I2C1_Init+0x50>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <MX_I2C1_Init+0x50>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017d4:	4804      	ldr	r0, [pc, #16]	; (80017e8 <MX_I2C1_Init+0x50>)
 80017d6:	f000 fdf9 	bl	80023cc <HAL_I2C_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017e0:	f000 fa2c 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	200000e0 	.word	0x200000e0
 80017ec:	40005400 	.word	0x40005400
 80017f0:	000186a0 	.word	0x000186a0

080017f4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <MX_I2C2_Init+0x50>)
 80017fa:	4a13      	ldr	r2, [pc, #76]	; (8001848 <MX_I2C2_Init+0x54>)
 80017fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <MX_I2C2_Init+0x50>)
 8001800:	4a12      	ldr	r2, [pc, #72]	; (800184c <MX_I2C2_Init+0x58>)
 8001802:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <MX_I2C2_Init+0x50>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <MX_I2C2_Init+0x50>)
 800180c:	2200      	movs	r2, #0
 800180e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <MX_I2C2_Init+0x50>)
 8001812:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001816:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001818:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <MX_I2C2_Init+0x50>)
 800181a:	2200      	movs	r2, #0
 800181c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <MX_I2C2_Init+0x50>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001824:	4b07      	ldr	r3, [pc, #28]	; (8001844 <MX_I2C2_Init+0x50>)
 8001826:	2200      	movs	r2, #0
 8001828:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <MX_I2C2_Init+0x50>)
 800182c:	2200      	movs	r2, #0
 800182e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001830:	4804      	ldr	r0, [pc, #16]	; (8001844 <MX_I2C2_Init+0x50>)
 8001832:	f000 fdcb 	bl	80023cc <HAL_I2C_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800183c:	f000 f9fe 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000134 	.word	0x20000134
 8001848:	40005800 	.word	0x40005800
 800184c:	000186a0 	.word	0x000186a0

08001850 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08c      	sub	sp, #48	; 0x30
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 031c 	add.w	r3, r7, #28
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a3a      	ldr	r2, [pc, #232]	; (8001958 <HAL_I2C_MspInit+0x108>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d12c      	bne.n	80018cc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
 8001876:	4b39      	ldr	r3, [pc, #228]	; (800195c <HAL_I2C_MspInit+0x10c>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a38      	ldr	r2, [pc, #224]	; (800195c <HAL_I2C_MspInit+0x10c>)
 800187c:	f043 0302 	orr.w	r3, r3, #2
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b36      	ldr	r3, [pc, #216]	; (800195c <HAL_I2C_MspInit+0x10c>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	61bb      	str	r3, [r7, #24]
 800188c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800188e:	23c0      	movs	r3, #192	; 0xc0
 8001890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001892:	2312      	movs	r3, #18
 8001894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189a:	2303      	movs	r3, #3
 800189c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800189e:	2304      	movs	r3, #4
 80018a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a2:	f107 031c 	add.w	r3, r7, #28
 80018a6:	4619      	mov	r1, r3
 80018a8:	482d      	ldr	r0, [pc, #180]	; (8001960 <HAL_I2C_MspInit+0x110>)
 80018aa:	f000 fbd7 	bl	800205c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	4b2a      	ldr	r3, [pc, #168]	; (800195c <HAL_I2C_MspInit+0x10c>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	4a29      	ldr	r2, [pc, #164]	; (800195c <HAL_I2C_MspInit+0x10c>)
 80018b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018bc:	6413      	str	r3, [r2, #64]	; 0x40
 80018be:	4b27      	ldr	r3, [pc, #156]	; (800195c <HAL_I2C_MspInit+0x10c>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80018ca:	e041      	b.n	8001950 <HAL_I2C_MspInit+0x100>
  else if(i2cHandle->Instance==I2C2)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a24      	ldr	r2, [pc, #144]	; (8001964 <HAL_I2C_MspInit+0x114>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d13c      	bne.n	8001950 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	4b20      	ldr	r3, [pc, #128]	; (800195c <HAL_I2C_MspInit+0x10c>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a1f      	ldr	r2, [pc, #124]	; (800195c <HAL_I2C_MspInit+0x10c>)
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b1d      	ldr	r3, [pc, #116]	; (800195c <HAL_I2C_MspInit+0x10c>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018f8:	2312      	movs	r3, #18
 80018fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001900:	2303      	movs	r3, #3
 8001902:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001904:	2304      	movs	r3, #4
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001908:	f107 031c 	add.w	r3, r7, #28
 800190c:	4619      	mov	r1, r3
 800190e:	4814      	ldr	r0, [pc, #80]	; (8001960 <HAL_I2C_MspInit+0x110>)
 8001910:	f000 fba4 	bl	800205c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001914:	2308      	movs	r3, #8
 8001916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001918:	2312      	movs	r3, #18
 800191a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001920:	2303      	movs	r3, #3
 8001922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001924:	2309      	movs	r3, #9
 8001926:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001928:	f107 031c 	add.w	r3, r7, #28
 800192c:	4619      	mov	r1, r3
 800192e:	480c      	ldr	r0, [pc, #48]	; (8001960 <HAL_I2C_MspInit+0x110>)
 8001930:	f000 fb94 	bl	800205c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <HAL_I2C_MspInit+0x10c>)
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	4a07      	ldr	r2, [pc, #28]	; (800195c <HAL_I2C_MspInit+0x10c>)
 800193e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001942:	6413      	str	r3, [r2, #64]	; 0x40
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <HAL_I2C_MspInit+0x10c>)
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	68fb      	ldr	r3, [r7, #12]
}
 8001950:	bf00      	nop
 8001952:	3730      	adds	r7, #48	; 0x30
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40005400 	.word	0x40005400
 800195c:	40023800 	.word	0x40023800
 8001960:	40020400 	.word	0x40020400
 8001964:	40005800 	.word	0x40005800

08001968 <I2C_writeByte>:
  }
}

/* USER CODE BEGIN 1 */
void I2C_writeByte(I2C_HandleTypeDef hi2cX,uint8_t device_address,uint8_t register_address,uint8_t * wdata,uint8_t size)
{
 8001968:	b084      	sub	sp, #16
 800196a:	b580      	push	{r7, lr}
 800196c:	b084      	sub	sp, #16
 800196e:	af04      	add	r7, sp, #16
 8001970:	f107 0c08 	add.w	ip, r7, #8
 8001974:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	i2c_status = HAL_I2C_Mem_Write(&hi2cX,device_address << 1,register_address,1,wdata,size,10);
 8001978:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800197c:	b29b      	uxth	r3, r3
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	b299      	uxth	r1, r3
 8001982:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001986:	b29a      	uxth	r2, r3
 8001988:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800198c:	b29b      	uxth	r3, r3
 800198e:	200a      	movs	r0, #10
 8001990:	9002      	str	r0, [sp, #8]
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	2301      	movs	r3, #1
 800199a:	f107 0008 	add.w	r0, r7, #8
 800199e:	f000 fe59 	bl	8002654 <HAL_I2C_Mem_Write>
 80019a2:	4603      	mov	r3, r0
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <I2C_writeByte+0x50>)
 80019a8:	701a      	strb	r2, [r3, #0]
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019b2:	b004      	add	sp, #16
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	200000dc 	.word	0x200000dc

080019bc <I2C_readByte>:
void I2C_readByte(I2C_HandleTypeDef hi2cX,uint8_t device_address,uint8_t register_address,uint8_t * rdata,uint8_t size)
{
 80019bc:	b084      	sub	sp, #16
 80019be:	b580      	push	{r7, lr}
 80019c0:	b084      	sub	sp, #16
 80019c2:	af04      	add	r7, sp, #16
 80019c4:	f107 0c08 	add.w	ip, r7, #8
 80019c8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	i2c_status = HAL_I2C_Mem_Read(&hi2cX,device_address << 1,register_address,1,rdata,size,10);
 80019cc:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	b299      	uxth	r1, r3
 80019d6:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80019da:	b29a      	uxth	r2, r3
 80019dc:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	200a      	movs	r0, #10
 80019e4:	9002      	str	r0, [sp, #8]
 80019e6:	9301      	str	r3, [sp, #4]
 80019e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	2301      	movs	r3, #1
 80019ee:	f107 0008 	add.w	r0, r7, #8
 80019f2:	f000 ff29 	bl	8002848 <HAL_I2C_Mem_Read>
 80019f6:	4603      	mov	r3, r0
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <I2C_readByte+0x50>)
 80019fc:	701a      	strb	r2, [r3, #0]
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a06:	b004      	add	sp, #16
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	200000dc 	.word	0x200000dc

08001a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a16:	f000 f9a5 	bl	8001d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a1a:	f000 f8a7 	bl	8001b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a1e:	f7ff fe5b 	bl	80016d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a22:	f7ff feb9 	bl	8001798 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001a26:	f7ff fee5 	bl	80017f4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  int k = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]
   for(i=0; i<255; i++) // i2c hattı kontrolü
 8001a2e:	4b42      	ldr	r3, [pc, #264]	; (8001b38 <main+0x128>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	e01f      	b.n	8001a76 <main+0x66>
   {

 	  if(!HAL_I2C_IsDeviceReady(&hi2c1, i, 1, 10)) // HAL_OK 0x00 olduğu için not ını alarak 1 e eşitledik
 8001a36:	4b40      	ldr	r3, [pc, #256]	; (8001b38 <main+0x128>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	b299      	uxth	r1, r3
 8001a3c:	230a      	movs	r3, #10
 8001a3e:	2201      	movs	r2, #1
 8001a40:	483e      	ldr	r0, [pc, #248]	; (8001b3c <main+0x12c>)
 8001a42:	f001 f927 	bl	8002c94 <HAL_I2C_IsDeviceReady>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10f      	bne.n	8001a6c <main+0x5c>
 	  {
 		  address[k] = i;
 8001a4c:	4b3a      	ldr	r3, [pc, #232]	; (8001b38 <main+0x128>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	b2d9      	uxtb	r1, r3
 8001a52:	4a3b      	ldr	r2, [pc, #236]	; (8001b40 <main+0x130>)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4413      	add	r3, r2
 8001a58:	460a      	mov	r2, r1
 8001a5a:	701a      	strb	r2, [r3, #0]
 		  k++;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	607b      	str	r3, [r7, #4]
 		  i++;
 8001a62:	4b35      	ldr	r3, [pc, #212]	; (8001b38 <main+0x128>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	3301      	adds	r3, #1
 8001a68:	4a33      	ldr	r2, [pc, #204]	; (8001b38 <main+0x128>)
 8001a6a:	6013      	str	r3, [r2, #0]
   for(i=0; i<255; i++) // i2c hattı kontrolü
 8001a6c:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <main+0x128>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	3301      	adds	r3, #1
 8001a72:	4a31      	ldr	r2, [pc, #196]	; (8001b38 <main+0x128>)
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	4b30      	ldr	r3, [pc, #192]	; (8001b38 <main+0x128>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2bfe      	cmp	r3, #254	; 0xfe
 8001a7c:	dddb      	ble.n	8001a36 <main+0x26>

 	  }
   }

   BMP388_Init();
 8001a7e:	f7ff f9e9 	bl	8000e54 <BMP388_Init>

   HAL_Delay(100); // sensörün ilk açıldığı an yanlış değer veriyor. ufak bi bekleme koydum
 8001a82:	2064      	movs	r0, #100	; 0x64
 8001a84:	f000 f9e0 	bl	8001e48 <HAL_Delay>
   BMP388_readData(&temperature, &press);
 8001a88:	492e      	ldr	r1, [pc, #184]	; (8001b44 <main+0x134>)
 8001a8a:	482f      	ldr	r0, [pc, #188]	; (8001b48 <main+0x138>)
 8001a8c:	f7ff fc28 	bl	80012e0 <BMP388_readData>
   referance_alt = BMP388_readAltitude(press, 1013.25);
 8001a90:	4b2c      	ldr	r3, [pc, #176]	; (8001b44 <main+0x134>)
 8001a92:	ed93 7b00 	vldr	d7, [r3]
 8001a96:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 8001b4c <main+0x13c>
 8001a9a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a9e:	eef0 0a67 	vmov.f32	s1, s15
 8001aa2:	f7ff fdc5 	bl	8001630 <BMP388_readAltitude>
 8001aa6:	eef0 7a40 	vmov.f32	s15, s0
 8001aaa:	4b29      	ldr	r3, [pc, #164]	; (8001b50 <main+0x140>)
 8001aac:	edc3 7a00 	vstr	s15, [r3]

  while (1)
  {

	  //temperature = BMP180_GetTemp(3);
     if(HAL_GetTick() - prev_tick >= 950){ // ufak bi 50 ms fark bırakmak iyi olur
 8001ab0:	f000 f9be 	bl	8001e30 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	4b27      	ldr	r3, [pc, #156]	; (8001b54 <main+0x144>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	f240 32b5 	movw	r2, #949	; 0x3b5
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d9f5      	bls.n	8001ab0 <main+0xa0>


    	 	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001ac4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ac8:	4823      	ldr	r0, [pc, #140]	; (8001b58 <main+0x148>)
 8001aca:	f000 fc64 	bl	8002396 <HAL_GPIO_TogglePin>

    	 	  	BMP388_readData(&temperature, &press);
 8001ace:	491d      	ldr	r1, [pc, #116]	; (8001b44 <main+0x134>)
 8001ad0:	481d      	ldr	r0, [pc, #116]	; (8001b48 <main+0x138>)
 8001ad2:	f7ff fc05 	bl	80012e0 <BMP388_readData>

    	 		altitude = BMP388_readAltitude(press, 1013.25);
 8001ad6:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <main+0x134>)
 8001ad8:	ed93 7b00 	vldr	d7, [r3]
 8001adc:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8001b4c <main+0x13c>
 8001ae0:	eeb0 0a47 	vmov.f32	s0, s14
 8001ae4:	eef0 0a67 	vmov.f32	s1, s15
 8001ae8:	f7ff fda2 	bl	8001630 <BMP388_readAltitude>
 8001aec:	eef0 7a40 	vmov.f32	s15, s0
 8001af0:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <main+0x14c>)
 8001af2:	edc3 7a00 	vstr	s15, [r3]
    	 	 	height = altitude - referance_alt; // işlem zaten her 1000 ms içinde tekrarlanacağı için yükseklik farkı velocity i verecek
 8001af6:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <main+0x14c>)
 8001af8:	ed93 7a00 	vldr	s14, [r3]
 8001afc:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <main+0x140>)
 8001afe:	edd3 7a00 	vldr	s15, [r3]
 8001b02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b06:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <main+0x150>)
 8001b08:	edc3 7a00 	vstr	s15, [r3]
    	 		velocity = height - prev_height;
 8001b0c:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <main+0x150>)
 8001b0e:	ed93 7a00 	vldr	s14, [r3]
 8001b12:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <main+0x154>)
 8001b14:	edd3 7a00 	vldr	s15, [r3]
 8001b18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <main+0x158>)
 8001b1e:	edc3 7a00 	vstr	s15, [r3]
    	 		prev_height = height;
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <main+0x150>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a0f      	ldr	r2, [pc, #60]	; (8001b64 <main+0x154>)
 8001b28:	6013      	str	r3, [r2, #0]
    	 	 	prev_tick = HAL_GetTick();
 8001b2a:	f000 f981 	bl	8001e30 <HAL_GetTick>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4a08      	ldr	r2, [pc, #32]	; (8001b54 <main+0x144>)
 8001b32:	6013      	str	r3, [r2, #0]
     if(HAL_GetTick() - prev_tick >= 950){ // ufak bi 50 ms fark bırakmak iyi olur
 8001b34:	e7bc      	b.n	8001ab0 <main+0xa0>
 8001b36:	bf00      	nop
 8001b38:	200001c4 	.word	0x200001c4
 8001b3c:	200000e0 	.word	0x200000e0
 8001b40:	200001b4 	.word	0x200001b4
 8001b44:	200001a0 	.word	0x200001a0
 8001b48:	200001a8 	.word	0x200001a8
 8001b4c:	447d5000 	.word	0x447d5000
 8001b50:	2000018c 	.word	0x2000018c
 8001b54:	200001b0 	.word	0x200001b0
 8001b58:	40020800 	.word	0x40020800
 8001b5c:	20000188 	.word	0x20000188
 8001b60:	20000194 	.word	0x20000194
 8001b64:	20000198 	.word	0x20000198
 8001b68:	20000190 	.word	0x20000190

08001b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b094      	sub	sp, #80	; 0x50
 8001b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b72:	f107 0320 	add.w	r3, r7, #32
 8001b76:	2230      	movs	r2, #48	; 0x30
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f002 f990 	bl	8003ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b80:	f107 030c 	add.w	r3, r7, #12
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b90:	2300      	movs	r3, #0
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	4b27      	ldr	r3, [pc, #156]	; (8001c34 <SystemClock_Config+0xc8>)
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	4a26      	ldr	r2, [pc, #152]	; (8001c34 <SystemClock_Config+0xc8>)
 8001b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba0:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <SystemClock_Config+0xc8>)
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bac:	2300      	movs	r3, #0
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	4b21      	ldr	r3, [pc, #132]	; (8001c38 <SystemClock_Config+0xcc>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a20      	ldr	r2, [pc, #128]	; (8001c38 <SystemClock_Config+0xcc>)
 8001bb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	4b1e      	ldr	r3, [pc, #120]	; (8001c38 <SystemClock_Config+0xcc>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bc4:	607b      	str	r3, [r7, #4]
 8001bc6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001bdc:	230c      	movs	r3, #12
 8001bde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001be0:	2360      	movs	r3, #96	; 0x60
 8001be2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001be4:	2302      	movs	r3, #2
 8001be6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001be8:	2304      	movs	r3, #4
 8001bea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bec:	f107 0320 	add.w	r3, r7, #32
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f001 fcd9 	bl	80035a8 <HAL_RCC_OscConfig>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001bfc:	f000 f81e 	bl	8001c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c00:	230f      	movs	r3, #15
 8001c02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c04:	2302      	movs	r3, #2
 8001c06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c16:	f107 030c 	add.w	r3, r7, #12
 8001c1a:	2103      	movs	r1, #3
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f001 ff3b 	bl	8003a98 <HAL_RCC_ClockConfig>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c28:	f000 f808 	bl	8001c3c <Error_Handler>
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	3750      	adds	r7, #80	; 0x50
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40007000 	.word	0x40007000

08001c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c40:	b672      	cpsid	i
}
 8001c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c44:	e7fe      	b.n	8001c44 <Error_Handler+0x8>
	...

08001c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <HAL_MspInit+0x4c>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	4a0f      	ldr	r2, [pc, #60]	; (8001c94 <HAL_MspInit+0x4c>)
 8001c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	; (8001c94 <HAL_MspInit+0x4c>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	603b      	str	r3, [r7, #0]
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <HAL_MspInit+0x4c>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	4a08      	ldr	r2, [pc, #32]	; (8001c94 <HAL_MspInit+0x4c>)
 8001c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c78:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <HAL_MspInit+0x4c>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40023800 	.word	0x40023800

08001c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c9c:	e7fe      	b.n	8001c9c <NMI_Handler+0x4>

08001c9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca2:	e7fe      	b.n	8001ca2 <HardFault_Handler+0x4>

08001ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <MemManage_Handler+0x4>

08001caa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cae:	e7fe      	b.n	8001cae <BusFault_Handler+0x4>

08001cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <UsageFault_Handler+0x4>

08001cb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ce4:	f000 f890 	bl	8001e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}

08001cec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <SystemInit+0x20>)
 8001cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf6:	4a05      	ldr	r2, [pc, #20]	; (8001d0c <SystemInit+0x20>)
 8001cf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d14:	480d      	ldr	r0, [pc, #52]	; (8001d4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d16:	490e      	ldr	r1, [pc, #56]	; (8001d50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d18:	4a0e      	ldr	r2, [pc, #56]	; (8001d54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d1c:	e002      	b.n	8001d24 <LoopCopyDataInit>

08001d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d22:	3304      	adds	r3, #4

08001d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d28:	d3f9      	bcc.n	8001d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d2a:	4a0b      	ldr	r2, [pc, #44]	; (8001d58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d2c:	4c0b      	ldr	r4, [pc, #44]	; (8001d5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d30:	e001      	b.n	8001d36 <LoopFillZerobss>

08001d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d34:	3204      	adds	r2, #4

08001d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d38:	d3fb      	bcc.n	8001d32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d3a:	f7ff ffd7 	bl	8001cec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d3e:	f002 f87d 	bl	8003e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d42:	f7ff fe65 	bl	8001a10 <main>
  bx  lr    
 8001d46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d50:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d54:	08004d58 	.word	0x08004d58
  ldr r2, =_sbss
 8001d58:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001d5c:	200001cc 	.word	0x200001cc

08001d60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d60:	e7fe      	b.n	8001d60 <ADC_IRQHandler>
	...

08001d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d68:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <HAL_Init+0x40>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0d      	ldr	r2, [pc, #52]	; (8001da4 <HAL_Init+0x40>)
 8001d6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d74:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <HAL_Init+0x40>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <HAL_Init+0x40>)
 8001d7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <HAL_Init+0x40>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a07      	ldr	r2, [pc, #28]	; (8001da4 <HAL_Init+0x40>)
 8001d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d8c:	2003      	movs	r0, #3
 8001d8e:	f000 f931 	bl	8001ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d92:	200f      	movs	r0, #15
 8001d94:	f000 f808 	bl	8001da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d98:	f7ff ff56 	bl	8001c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40023c00 	.word	0x40023c00

08001da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db0:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <HAL_InitTick+0x54>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <HAL_InitTick+0x58>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	4619      	mov	r1, r3
 8001dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f000 f93b 	bl	8002042 <HAL_SYSTICK_Config>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e00e      	b.n	8001df4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b0f      	cmp	r3, #15
 8001dda:	d80a      	bhi.n	8001df2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295
 8001de4:	f000 f911 	bl	800200a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001de8:	4a06      	ldr	r2, [pc, #24]	; (8001e04 <HAL_InitTick+0x5c>)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e000      	b.n	8001df4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	20000008 	.word	0x20000008
 8001e04:	20000004 	.word	0x20000004

08001e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_IncTick+0x20>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	461a      	mov	r2, r3
 8001e12:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_IncTick+0x24>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4413      	add	r3, r2
 8001e18:	4a04      	ldr	r2, [pc, #16]	; (8001e2c <HAL_IncTick+0x24>)
 8001e1a:	6013      	str	r3, [r2, #0]
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20000008 	.word	0x20000008
 8001e2c:	200001c8 	.word	0x200001c8

08001e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return uwTick;
 8001e34:	4b03      	ldr	r3, [pc, #12]	; (8001e44 <HAL_GetTick+0x14>)
 8001e36:	681b      	ldr	r3, [r3, #0]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	200001c8 	.word	0x200001c8

08001e48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e50:	f7ff ffee 	bl	8001e30 <HAL_GetTick>
 8001e54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e60:	d005      	beq.n	8001e6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e62:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <HAL_Delay+0x44>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	461a      	mov	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e6e:	bf00      	nop
 8001e70:	f7ff ffde 	bl	8001e30 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d8f7      	bhi.n	8001e70 <HAL_Delay+0x28>
  {
  }
}
 8001e80:	bf00      	nop
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000008 	.word	0x20000008

08001e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eac:	4013      	ands	r3, r2
 8001eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ec2:	4a04      	ldr	r2, [pc, #16]	; (8001ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	60d3      	str	r3, [r2, #12]
}
 8001ec8:	bf00      	nop
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001edc:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	0a1b      	lsrs	r3, r3, #8
 8001ee2:	f003 0307 	and.w	r3, r3, #7
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	6039      	str	r1, [r7, #0]
 8001efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	db0a      	blt.n	8001f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	490c      	ldr	r1, [pc, #48]	; (8001f40 <__NVIC_SetPriority+0x4c>)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	0112      	lsls	r2, r2, #4
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	440b      	add	r3, r1
 8001f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f1c:	e00a      	b.n	8001f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4908      	ldr	r1, [pc, #32]	; (8001f44 <__NVIC_SetPriority+0x50>)
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	3b04      	subs	r3, #4
 8001f2c:	0112      	lsls	r2, r2, #4
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	440b      	add	r3, r1
 8001f32:	761a      	strb	r2, [r3, #24]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000e100 	.word	0xe000e100
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f1c3 0307 	rsb	r3, r3, #7
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	bf28      	it	cs
 8001f66:	2304      	movcs	r3, #4
 8001f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	2b06      	cmp	r3, #6
 8001f70:	d902      	bls.n	8001f78 <NVIC_EncodePriority+0x30>
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3b03      	subs	r3, #3
 8001f76:	e000      	b.n	8001f7a <NVIC_EncodePriority+0x32>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43da      	mvns	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f90:	f04f 31ff 	mov.w	r1, #4294967295
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	43d9      	mvns	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	4313      	orrs	r3, r2
         );
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3724      	adds	r7, #36	; 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fc0:	d301      	bcc.n	8001fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e00f      	b.n	8001fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <SysTick_Config+0x40>)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fce:	210f      	movs	r1, #15
 8001fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd4:	f7ff ff8e 	bl	8001ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <SysTick_Config+0x40>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fde:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <SysTick_Config+0x40>)
 8001fe0:	2207      	movs	r2, #7
 8001fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	e000e010 	.word	0xe000e010

08001ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff ff47 	bl	8001e90 <__NVIC_SetPriorityGrouping>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800200a:	b580      	push	{r7, lr}
 800200c:	b086      	sub	sp, #24
 800200e:	af00      	add	r7, sp, #0
 8002010:	4603      	mov	r3, r0
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800201c:	f7ff ff5c 	bl	8001ed8 <__NVIC_GetPriorityGrouping>
 8002020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	6978      	ldr	r0, [r7, #20]
 8002028:	f7ff ff8e 	bl	8001f48 <NVIC_EncodePriority>
 800202c:	4602      	mov	r2, r0
 800202e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff5d 	bl	8001ef4 <__NVIC_SetPriority>
}
 800203a:	bf00      	nop
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff ffb0 	bl	8001fb0 <SysTick_Config>
 8002050:	4603      	mov	r3, r0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800205c:	b480      	push	{r7}
 800205e:	b089      	sub	sp, #36	; 0x24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800206e:	2300      	movs	r3, #0
 8002070:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
 8002076:	e159      	b.n	800232c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002078:	2201      	movs	r2, #1
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	4013      	ands	r3, r2
 800208a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	429a      	cmp	r2, r3
 8002092:	f040 8148 	bne.w	8002326 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d005      	beq.n	80020ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d130      	bne.n	8002110 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	2203      	movs	r2, #3
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43db      	mvns	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4013      	ands	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020e4:	2201      	movs	r2, #1
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	091b      	lsrs	r3, r3, #4
 80020fa:	f003 0201 	and.w	r2, r3, #1
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	2b03      	cmp	r3, #3
 800211a:	d017      	beq.n	800214c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	2203      	movs	r2, #3
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d123      	bne.n	80021a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	08da      	lsrs	r2, r3, #3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3208      	adds	r2, #8
 8002160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002164:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	220f      	movs	r2, #15
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	691a      	ldr	r2, [r3, #16]
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	08da      	lsrs	r2, r3, #3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3208      	adds	r2, #8
 800219a:	69b9      	ldr	r1, [r7, #24]
 800219c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	2203      	movs	r2, #3
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 0203 	and.w	r2, r3, #3
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 80a2 	beq.w	8002326 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	4b57      	ldr	r3, [pc, #348]	; (8002344 <HAL_GPIO_Init+0x2e8>)
 80021e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ea:	4a56      	ldr	r2, [pc, #344]	; (8002344 <HAL_GPIO_Init+0x2e8>)
 80021ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f0:	6453      	str	r3, [r2, #68]	; 0x44
 80021f2:	4b54      	ldr	r3, [pc, #336]	; (8002344 <HAL_GPIO_Init+0x2e8>)
 80021f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021fe:	4a52      	ldr	r2, [pc, #328]	; (8002348 <HAL_GPIO_Init+0x2ec>)
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	089b      	lsrs	r3, r3, #2
 8002204:	3302      	adds	r3, #2
 8002206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	220f      	movs	r2, #15
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4013      	ands	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a49      	ldr	r2, [pc, #292]	; (800234c <HAL_GPIO_Init+0x2f0>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d019      	beq.n	800225e <HAL_GPIO_Init+0x202>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a48      	ldr	r2, [pc, #288]	; (8002350 <HAL_GPIO_Init+0x2f4>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d013      	beq.n	800225a <HAL_GPIO_Init+0x1fe>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a47      	ldr	r2, [pc, #284]	; (8002354 <HAL_GPIO_Init+0x2f8>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d00d      	beq.n	8002256 <HAL_GPIO_Init+0x1fa>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a46      	ldr	r2, [pc, #280]	; (8002358 <HAL_GPIO_Init+0x2fc>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d007      	beq.n	8002252 <HAL_GPIO_Init+0x1f6>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a45      	ldr	r2, [pc, #276]	; (800235c <HAL_GPIO_Init+0x300>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d101      	bne.n	800224e <HAL_GPIO_Init+0x1f2>
 800224a:	2304      	movs	r3, #4
 800224c:	e008      	b.n	8002260 <HAL_GPIO_Init+0x204>
 800224e:	2307      	movs	r3, #7
 8002250:	e006      	b.n	8002260 <HAL_GPIO_Init+0x204>
 8002252:	2303      	movs	r3, #3
 8002254:	e004      	b.n	8002260 <HAL_GPIO_Init+0x204>
 8002256:	2302      	movs	r3, #2
 8002258:	e002      	b.n	8002260 <HAL_GPIO_Init+0x204>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <HAL_GPIO_Init+0x204>
 800225e:	2300      	movs	r3, #0
 8002260:	69fa      	ldr	r2, [r7, #28]
 8002262:	f002 0203 	and.w	r2, r2, #3
 8002266:	0092      	lsls	r2, r2, #2
 8002268:	4093      	lsls	r3, r2
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002270:	4935      	ldr	r1, [pc, #212]	; (8002348 <HAL_GPIO_Init+0x2ec>)
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	089b      	lsrs	r3, r3, #2
 8002276:	3302      	adds	r3, #2
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800227e:	4b38      	ldr	r3, [pc, #224]	; (8002360 <HAL_GPIO_Init+0x304>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022a2:	4a2f      	ldr	r2, [pc, #188]	; (8002360 <HAL_GPIO_Init+0x304>)
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022a8:	4b2d      	ldr	r3, [pc, #180]	; (8002360 <HAL_GPIO_Init+0x304>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022cc:	4a24      	ldr	r2, [pc, #144]	; (8002360 <HAL_GPIO_Init+0x304>)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022d2:	4b23      	ldr	r3, [pc, #140]	; (8002360 <HAL_GPIO_Init+0x304>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	43db      	mvns	r3, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4013      	ands	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022f6:	4a1a      	ldr	r2, [pc, #104]	; (8002360 <HAL_GPIO_Init+0x304>)
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022fc:	4b18      	ldr	r3, [pc, #96]	; (8002360 <HAL_GPIO_Init+0x304>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002320:	4a0f      	ldr	r2, [pc, #60]	; (8002360 <HAL_GPIO_Init+0x304>)
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3301      	adds	r3, #1
 800232a:	61fb      	str	r3, [r7, #28]
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	2b0f      	cmp	r3, #15
 8002330:	f67f aea2 	bls.w	8002078 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002334:	bf00      	nop
 8002336:	bf00      	nop
 8002338:	3724      	adds	r7, #36	; 0x24
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800
 8002348:	40013800 	.word	0x40013800
 800234c:	40020000 	.word	0x40020000
 8002350:	40020400 	.word	0x40020400
 8002354:	40020800 	.word	0x40020800
 8002358:	40020c00 	.word	0x40020c00
 800235c:	40021000 	.word	0x40021000
 8002360:	40013c00 	.word	0x40013c00

08002364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	807b      	strh	r3, [r7, #2]
 8002370:	4613      	mov	r3, r2
 8002372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002374:	787b      	ldrb	r3, [r7, #1]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800237a:	887a      	ldrh	r2, [r7, #2]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002380:	e003      	b.n	800238a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002382:	887b      	ldrh	r3, [r7, #2]
 8002384:	041a      	lsls	r2, r3, #16
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	619a      	str	r2, [r3, #24]
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002396:	b480      	push	{r7}
 8002398:	b085      	sub	sp, #20
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	460b      	mov	r3, r1
 80023a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023a8:	887a      	ldrh	r2, [r7, #2]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4013      	ands	r3, r2
 80023ae:	041a      	lsls	r2, r3, #16
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	43d9      	mvns	r1, r3
 80023b4:	887b      	ldrh	r3, [r7, #2]
 80023b6:	400b      	ands	r3, r1
 80023b8:	431a      	orrs	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	619a      	str	r2, [r3, #24]
}
 80023be:	bf00      	nop
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e12b      	b.n	8002636 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d106      	bne.n	80023f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff fa2c 	bl	8001850 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2224      	movs	r2, #36	; 0x24
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0201 	bic.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800241e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800242e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002430:	f001 fcea 	bl	8003e08 <HAL_RCC_GetPCLK1Freq>
 8002434:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	4a81      	ldr	r2, [pc, #516]	; (8002640 <HAL_I2C_Init+0x274>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d807      	bhi.n	8002450 <HAL_I2C_Init+0x84>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4a80      	ldr	r2, [pc, #512]	; (8002644 <HAL_I2C_Init+0x278>)
 8002444:	4293      	cmp	r3, r2
 8002446:	bf94      	ite	ls
 8002448:	2301      	movls	r3, #1
 800244a:	2300      	movhi	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	e006      	b.n	800245e <HAL_I2C_Init+0x92>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4a7d      	ldr	r2, [pc, #500]	; (8002648 <HAL_I2C_Init+0x27c>)
 8002454:	4293      	cmp	r3, r2
 8002456:	bf94      	ite	ls
 8002458:	2301      	movls	r3, #1
 800245a:	2300      	movhi	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e0e7      	b.n	8002636 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	4a78      	ldr	r2, [pc, #480]	; (800264c <HAL_I2C_Init+0x280>)
 800246a:	fba2 2303 	umull	r2, r3, r2, r3
 800246e:	0c9b      	lsrs	r3, r3, #18
 8002470:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	430a      	orrs	r2, r1
 8002484:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	4a6a      	ldr	r2, [pc, #424]	; (8002640 <HAL_I2C_Init+0x274>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d802      	bhi.n	80024a0 <HAL_I2C_Init+0xd4>
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	3301      	adds	r3, #1
 800249e:	e009      	b.n	80024b4 <HAL_I2C_Init+0xe8>
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024a6:	fb02 f303 	mul.w	r3, r2, r3
 80024aa:	4a69      	ldr	r2, [pc, #420]	; (8002650 <HAL_I2C_Init+0x284>)
 80024ac:	fba2 2303 	umull	r2, r3, r2, r3
 80024b0:	099b      	lsrs	r3, r3, #6
 80024b2:	3301      	adds	r3, #1
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	430b      	orrs	r3, r1
 80024ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	495c      	ldr	r1, [pc, #368]	; (8002640 <HAL_I2C_Init+0x274>)
 80024d0:	428b      	cmp	r3, r1
 80024d2:	d819      	bhi.n	8002508 <HAL_I2C_Init+0x13c>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	1e59      	subs	r1, r3, #1
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	fbb1 f3f3 	udiv	r3, r1, r3
 80024e2:	1c59      	adds	r1, r3, #1
 80024e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024e8:	400b      	ands	r3, r1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00a      	beq.n	8002504 <HAL_I2C_Init+0x138>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	1e59      	subs	r1, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80024fc:	3301      	adds	r3, #1
 80024fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002502:	e051      	b.n	80025a8 <HAL_I2C_Init+0x1dc>
 8002504:	2304      	movs	r3, #4
 8002506:	e04f      	b.n	80025a8 <HAL_I2C_Init+0x1dc>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d111      	bne.n	8002534 <HAL_I2C_Init+0x168>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	1e58      	subs	r0, r3, #1
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6859      	ldr	r1, [r3, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	440b      	add	r3, r1
 800251e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002522:	3301      	adds	r3, #1
 8002524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002528:	2b00      	cmp	r3, #0
 800252a:	bf0c      	ite	eq
 800252c:	2301      	moveq	r3, #1
 800252e:	2300      	movne	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	e012      	b.n	800255a <HAL_I2C_Init+0x18e>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1e58      	subs	r0, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6859      	ldr	r1, [r3, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	0099      	lsls	r1, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	fbb0 f3f3 	udiv	r3, r0, r3
 800254a:	3301      	adds	r3, #1
 800254c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002550:	2b00      	cmp	r3, #0
 8002552:	bf0c      	ite	eq
 8002554:	2301      	moveq	r3, #1
 8002556:	2300      	movne	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_I2C_Init+0x196>
 800255e:	2301      	movs	r3, #1
 8002560:	e022      	b.n	80025a8 <HAL_I2C_Init+0x1dc>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10e      	bne.n	8002588 <HAL_I2C_Init+0x1bc>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1e58      	subs	r0, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6859      	ldr	r1, [r3, #4]
 8002572:	460b      	mov	r3, r1
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	440b      	add	r3, r1
 8002578:	fbb0 f3f3 	udiv	r3, r0, r3
 800257c:	3301      	adds	r3, #1
 800257e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002586:	e00f      	b.n	80025a8 <HAL_I2C_Init+0x1dc>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1e58      	subs	r0, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6859      	ldr	r1, [r3, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	0099      	lsls	r1, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	fbb0 f3f3 	udiv	r3, r0, r3
 800259e:	3301      	adds	r3, #1
 80025a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	6809      	ldr	r1, [r1, #0]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69da      	ldr	r2, [r3, #28]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6911      	ldr	r1, [r2, #16]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	68d2      	ldr	r2, [r2, #12]
 80025e2:	4311      	orrs	r1, r2
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6812      	ldr	r2, [r2, #0]
 80025e8:	430b      	orrs	r3, r1
 80025ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	695a      	ldr	r2, [r3, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0201 	orr.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2220      	movs	r2, #32
 8002622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	000186a0 	.word	0x000186a0
 8002644:	001e847f 	.word	0x001e847f
 8002648:	003d08ff 	.word	0x003d08ff
 800264c:	431bde83 	.word	0x431bde83
 8002650:	10624dd3 	.word	0x10624dd3

08002654 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b088      	sub	sp, #32
 8002658:	af02      	add	r7, sp, #8
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	4608      	mov	r0, r1
 800265e:	4611      	mov	r1, r2
 8002660:	461a      	mov	r2, r3
 8002662:	4603      	mov	r3, r0
 8002664:	817b      	strh	r3, [r7, #10]
 8002666:	460b      	mov	r3, r1
 8002668:	813b      	strh	r3, [r7, #8]
 800266a:	4613      	mov	r3, r2
 800266c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800266e:	f7ff fbdf 	bl	8001e30 <HAL_GetTick>
 8002672:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b20      	cmp	r3, #32
 800267e:	f040 80d9 	bne.w	8002834 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	2319      	movs	r3, #25
 8002688:	2201      	movs	r2, #1
 800268a:	496d      	ldr	r1, [pc, #436]	; (8002840 <HAL_I2C_Mem_Write+0x1ec>)
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f000 fdad 	bl	80031ec <I2C_WaitOnFlagUntilTimeout>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002698:	2302      	movs	r3, #2
 800269a:	e0cc      	b.n	8002836 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d101      	bne.n	80026aa <HAL_I2C_Mem_Write+0x56>
 80026a6:	2302      	movs	r3, #2
 80026a8:	e0c5      	b.n	8002836 <HAL_I2C_Mem_Write+0x1e2>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d007      	beq.n	80026d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2221      	movs	r2, #33	; 0x21
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2240      	movs	r2, #64	; 0x40
 80026ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a3a      	ldr	r2, [r7, #32]
 80026fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002700:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002706:	b29a      	uxth	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4a4d      	ldr	r2, [pc, #308]	; (8002844 <HAL_I2C_Mem_Write+0x1f0>)
 8002710:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002712:	88f8      	ldrh	r0, [r7, #6]
 8002714:	893a      	ldrh	r2, [r7, #8]
 8002716:	8979      	ldrh	r1, [r7, #10]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	9301      	str	r3, [sp, #4]
 800271c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	4603      	mov	r3, r0
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 fbe4 	bl	8002ef0 <I2C_RequestMemoryWrite>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d052      	beq.n	80027d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e081      	b.n	8002836 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 fe2e 	bl	8003398 <I2C_WaitOnTXEFlagUntilTimeout>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00d      	beq.n	800275e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	2b04      	cmp	r3, #4
 8002748:	d107      	bne.n	800275a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002758:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e06b      	b.n	8002836 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	781a      	ldrb	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002778:	3b01      	subs	r3, #1
 800277a:	b29a      	uxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002784:	b29b      	uxth	r3, r3
 8002786:	3b01      	subs	r3, #1
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b04      	cmp	r3, #4
 800279a:	d11b      	bne.n	80027d4 <HAL_I2C_Mem_Write+0x180>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d017      	beq.n	80027d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	781a      	ldrb	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027be:	3b01      	subs	r3, #1
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1aa      	bne.n	8002732 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 fe1a 	bl	800341a <I2C_WaitOnBTFFlagUntilTimeout>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00d      	beq.n	8002808 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	d107      	bne.n	8002804 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002802:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e016      	b.n	8002836 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002816:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2220      	movs	r2, #32
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	e000      	b.n	8002836 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002834:	2302      	movs	r3, #2
  }
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	00100002 	.word	0x00100002
 8002844:	ffff0000 	.word	0xffff0000

08002848 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08c      	sub	sp, #48	; 0x30
 800284c:	af02      	add	r7, sp, #8
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	4608      	mov	r0, r1
 8002852:	4611      	mov	r1, r2
 8002854:	461a      	mov	r2, r3
 8002856:	4603      	mov	r3, r0
 8002858:	817b      	strh	r3, [r7, #10]
 800285a:	460b      	mov	r3, r1
 800285c:	813b      	strh	r3, [r7, #8]
 800285e:	4613      	mov	r3, r2
 8002860:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002862:	f7ff fae5 	bl	8001e30 <HAL_GetTick>
 8002866:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b20      	cmp	r3, #32
 8002872:	f040 8208 	bne.w	8002c86 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	2319      	movs	r3, #25
 800287c:	2201      	movs	r2, #1
 800287e:	497b      	ldr	r1, [pc, #492]	; (8002a6c <HAL_I2C_Mem_Read+0x224>)
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 fcb3 	bl	80031ec <I2C_WaitOnFlagUntilTimeout>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800288c:	2302      	movs	r3, #2
 800288e:	e1fb      	b.n	8002c88 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_I2C_Mem_Read+0x56>
 800289a:	2302      	movs	r3, #2
 800289c:	e1f4      	b.n	8002c88 <HAL_I2C_Mem_Read+0x440>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d007      	beq.n	80028c4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f042 0201 	orr.w	r2, r2, #1
 80028c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2222      	movs	r2, #34	; 0x22
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2240      	movs	r2, #64	; 0x40
 80028e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80028f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4a5b      	ldr	r2, [pc, #364]	; (8002a70 <HAL_I2C_Mem_Read+0x228>)
 8002904:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002906:	88f8      	ldrh	r0, [r7, #6]
 8002908:	893a      	ldrh	r2, [r7, #8]
 800290a:	8979      	ldrh	r1, [r7, #10]
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	9301      	str	r3, [sp, #4]
 8002910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	4603      	mov	r3, r0
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 fb80 	bl	800301c <I2C_RequestMemoryRead>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e1b0      	b.n	8002c88 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292a:	2b00      	cmp	r3, #0
 800292c:	d113      	bne.n	8002956 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800292e:	2300      	movs	r3, #0
 8002930:	623b      	str	r3, [r7, #32]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	623b      	str	r3, [r7, #32]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	623b      	str	r3, [r7, #32]
 8002942:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	e184      	b.n	8002c60 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295a:	2b01      	cmp	r3, #1
 800295c:	d11b      	bne.n	8002996 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800296c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	61fb      	str	r3, [r7, #28]
 8002982:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	e164      	b.n	8002c60 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299a:	2b02      	cmp	r3, #2
 800299c:	d11b      	bne.n	80029d6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029be:	2300      	movs	r3, #0
 80029c0:	61bb      	str	r3, [r7, #24]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	e144      	b.n	8002c60 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80029ec:	e138      	b.n	8002c60 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	f200 80f1 	bhi.w	8002bda <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d123      	bne.n	8002a48 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 fd49 	bl	800349c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e139      	b.n	8002c88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a46:	e10b      	b.n	8002c60 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d14e      	bne.n	8002aee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a56:	2200      	movs	r2, #0
 8002a58:	4906      	ldr	r1, [pc, #24]	; (8002a74 <HAL_I2C_Mem_Read+0x22c>)
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 fbc6 	bl	80031ec <I2C_WaitOnFlagUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d008      	beq.n	8002a78 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e10e      	b.n	8002c88 <HAL_I2C_Mem_Read+0x440>
 8002a6a:	bf00      	nop
 8002a6c:	00100002 	.word	0x00100002
 8002a70:	ffff0000 	.word	0xffff0000
 8002a74:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691a      	ldr	r2, [r3, #16]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	1c5a      	adds	r2, r3, #1
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002aec:	e0b8      	b.n	8002c60 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af4:	2200      	movs	r2, #0
 8002af6:	4966      	ldr	r1, [pc, #408]	; (8002c90 <HAL_I2C_Mem_Read+0x448>)
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 fb77 	bl	80031ec <I2C_WaitOnFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0bf      	b.n	8002c88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691a      	ldr	r2, [r3, #16]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b50:	2200      	movs	r2, #0
 8002b52:	494f      	ldr	r1, [pc, #316]	; (8002c90 <HAL_I2C_Mem_Read+0x448>)
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 fb49 	bl	80031ec <I2C_WaitOnFlagUntilTimeout>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e091      	b.n	8002c88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	691a      	ldr	r2, [r3, #16]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	1c5a      	adds	r2, r3, #1
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b90:	3b01      	subs	r3, #1
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691a      	ldr	r2, [r3, #16]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bd8:	e042      	b.n	8002c60 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 fc5c 	bl	800349c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e04c      	b.n	8002c88 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d118      	bne.n	8002c60 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f47f aec2 	bne.w	80029ee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	e000      	b.n	8002c88 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002c86:	2302      	movs	r3, #2
  }
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3728      	adds	r7, #40	; 0x28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	00010004 	.word	0x00010004

08002c94 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08a      	sub	sp, #40	; 0x28
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	607a      	str	r2, [r7, #4]
 8002c9e:	603b      	str	r3, [r7, #0]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002ca4:	f7ff f8c4 	bl	8001e30 <HAL_GetTick>
 8002ca8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b20      	cmp	r3, #32
 8002cb8:	f040 8111 	bne.w	8002ede <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	2319      	movs	r3, #25
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	4988      	ldr	r1, [pc, #544]	; (8002ee8 <HAL_I2C_IsDeviceReady+0x254>)
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 fa90 	bl	80031ec <I2C_WaitOnFlagUntilTimeout>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e104      	b.n	8002ee0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_I2C_IsDeviceReady+0x50>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e0fd      	b.n	8002ee0 <HAL_I2C_IsDeviceReady+0x24c>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d007      	beq.n	8002d0a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f042 0201 	orr.w	r2, r2, #1
 8002d08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2224      	movs	r2, #36	; 0x24
 8002d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4a70      	ldr	r2, [pc, #448]	; (8002eec <HAL_I2C_IsDeviceReady+0x258>)
 8002d2c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d3c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 fa4e 	bl	80031ec <I2C_WaitOnFlagUntilTimeout>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00d      	beq.n	8002d72 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d64:	d103      	bne.n	8002d6e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d6c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e0b6      	b.n	8002ee0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d72:	897b      	ldrh	r3, [r7, #10]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d80:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002d82:	f7ff f855 	bl	8001e30 <HAL_GetTick>
 8002d86:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	bf0c      	ite	eq
 8002d96:	2301      	moveq	r3, #1
 8002d98:	2300      	movne	r3, #0
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dac:	bf0c      	ite	eq
 8002dae:	2301      	moveq	r3, #1
 8002db0:	2300      	movne	r3, #0
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002db6:	e025      	b.n	8002e04 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002db8:	f7ff f83a 	bl	8001e30 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d302      	bcc.n	8002dce <HAL_I2C_IsDeviceReady+0x13a>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d103      	bne.n	8002dd6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	22a0      	movs	r2, #160	; 0xa0
 8002dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	bf0c      	ite	eq
 8002de4:	2301      	moveq	r3, #1
 8002de6:	2300      	movne	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dfa:	bf0c      	ite	eq
 8002dfc:	2301      	moveq	r3, #1
 8002dfe:	2300      	movne	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2ba0      	cmp	r3, #160	; 0xa0
 8002e0e:	d005      	beq.n	8002e1c <HAL_I2C_IsDeviceReady+0x188>
 8002e10:	7dfb      	ldrb	r3, [r7, #23]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d102      	bne.n	8002e1c <HAL_I2C_IsDeviceReady+0x188>
 8002e16:	7dbb      	ldrb	r3, [r7, #22]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0cd      	beq.n	8002db8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d129      	bne.n	8002e86 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e40:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e42:	2300      	movs	r3, #0
 8002e44:	613b      	str	r3, [r7, #16]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	2319      	movs	r3, #25
 8002e5e:	2201      	movs	r2, #1
 8002e60:	4921      	ldr	r1, [pc, #132]	; (8002ee8 <HAL_I2C_IsDeviceReady+0x254>)
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 f9c2 	bl	80031ec <I2C_WaitOnFlagUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e036      	b.n	8002ee0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	e02c      	b.n	8002ee0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e94:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e9e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	2319      	movs	r3, #25
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	490f      	ldr	r1, [pc, #60]	; (8002ee8 <HAL_I2C_IsDeviceReady+0x254>)
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 f99e 	bl	80031ec <I2C_WaitOnFlagUntilTimeout>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e012      	b.n	8002ee0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	f4ff af32 	bcc.w	8002d2e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002ede:	2302      	movs	r3, #2
  }
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3720      	adds	r7, #32
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	00100002 	.word	0x00100002
 8002eec:	ffff0000 	.word	0xffff0000

08002ef0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b088      	sub	sp, #32
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	4608      	mov	r0, r1
 8002efa:	4611      	mov	r1, r2
 8002efc:	461a      	mov	r2, r3
 8002efe:	4603      	mov	r3, r0
 8002f00:	817b      	strh	r3, [r7, #10]
 8002f02:	460b      	mov	r3, r1
 8002f04:	813b      	strh	r3, [r7, #8]
 8002f06:	4613      	mov	r3, r2
 8002f08:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 f960 	bl	80031ec <I2C_WaitOnFlagUntilTimeout>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00d      	beq.n	8002f4e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f40:	d103      	bne.n	8002f4a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e05f      	b.n	800300e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f4e:	897b      	ldrh	r3, [r7, #10]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	461a      	mov	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	6a3a      	ldr	r2, [r7, #32]
 8002f62:	492d      	ldr	r1, [pc, #180]	; (8003018 <I2C_RequestMemoryWrite+0x128>)
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f000 f998 	bl	800329a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e04c      	b.n	800300e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f8c:	6a39      	ldr	r1, [r7, #32]
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 fa02 	bl	8003398 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00d      	beq.n	8002fb6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d107      	bne.n	8002fb2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e02b      	b.n	800300e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fb6:	88fb      	ldrh	r3, [r7, #6]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d105      	bne.n	8002fc8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fbc:	893b      	ldrh	r3, [r7, #8]
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	611a      	str	r2, [r3, #16]
 8002fc6:	e021      	b.n	800300c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002fc8:	893b      	ldrh	r3, [r7, #8]
 8002fca:	0a1b      	lsrs	r3, r3, #8
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd8:	6a39      	ldr	r1, [r7, #32]
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f9dc 	bl	8003398 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00d      	beq.n	8003002 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d107      	bne.n	8002ffe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ffc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e005      	b.n	800300e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003002:	893b      	ldrh	r3, [r7, #8]
 8003004:	b2da      	uxtb	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	00010002 	.word	0x00010002

0800301c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af02      	add	r7, sp, #8
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	4608      	mov	r0, r1
 8003026:	4611      	mov	r1, r2
 8003028:	461a      	mov	r2, r3
 800302a:	4603      	mov	r3, r0
 800302c:	817b      	strh	r3, [r7, #10]
 800302e:	460b      	mov	r3, r1
 8003030:	813b      	strh	r3, [r7, #8]
 8003032:	4613      	mov	r3, r2
 8003034:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003044:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003054:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	2200      	movs	r2, #0
 800305e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 f8c2 	bl	80031ec <I2C_WaitOnFlagUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00d      	beq.n	800308a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800307c:	d103      	bne.n	8003086 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003084:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e0aa      	b.n	80031e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800308a:	897b      	ldrh	r3, [r7, #10]
 800308c:	b2db      	uxtb	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003098:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	6a3a      	ldr	r2, [r7, #32]
 800309e:	4952      	ldr	r1, [pc, #328]	; (80031e8 <I2C_RequestMemoryRead+0x1cc>)
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 f8fa 	bl	800329a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e097      	b.n	80031e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	617b      	str	r3, [r7, #20]
 80030c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c8:	6a39      	ldr	r1, [r7, #32]
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f964 	bl	8003398 <I2C_WaitOnTXEFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00d      	beq.n	80030f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d107      	bne.n	80030ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e076      	b.n	80031e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030f2:	88fb      	ldrh	r3, [r7, #6]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d105      	bne.n	8003104 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030f8:	893b      	ldrh	r3, [r7, #8]
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	611a      	str	r2, [r3, #16]
 8003102:	e021      	b.n	8003148 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003104:	893b      	ldrh	r3, [r7, #8]
 8003106:	0a1b      	lsrs	r3, r3, #8
 8003108:	b29b      	uxth	r3, r3
 800310a:	b2da      	uxtb	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003114:	6a39      	ldr	r1, [r7, #32]
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 f93e 	bl	8003398 <I2C_WaitOnTXEFlagUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00d      	beq.n	800313e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	2b04      	cmp	r3, #4
 8003128:	d107      	bne.n	800313a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003138:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e050      	b.n	80031e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800313e:	893b      	ldrh	r3, [r7, #8]
 8003140:	b2da      	uxtb	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800314a:	6a39      	ldr	r1, [r7, #32]
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 f923 	bl	8003398 <I2C_WaitOnTXEFlagUntilTimeout>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00d      	beq.n	8003174 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	2b04      	cmp	r3, #4
 800315e:	d107      	bne.n	8003170 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800316e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e035      	b.n	80031e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003182:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	2200      	movs	r2, #0
 800318c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f82b 	bl	80031ec <I2C_WaitOnFlagUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00d      	beq.n	80031b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031aa:	d103      	bne.n	80031b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e013      	b.n	80031e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80031b8:	897b      	ldrh	r3, [r7, #10]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	6a3a      	ldr	r2, [r7, #32]
 80031cc:	4906      	ldr	r1, [pc, #24]	; (80031e8 <I2C_RequestMemoryRead+0x1cc>)
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 f863 	bl	800329a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	00010002 	.word	0x00010002

080031ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	603b      	str	r3, [r7, #0]
 80031f8:	4613      	mov	r3, r2
 80031fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031fc:	e025      	b.n	800324a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003204:	d021      	beq.n	800324a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003206:	f7fe fe13 	bl	8001e30 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d302      	bcc.n	800321c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d116      	bne.n	800324a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f043 0220 	orr.w	r2, r3, #32
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e023      	b.n	8003292 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	0c1b      	lsrs	r3, r3, #16
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b01      	cmp	r3, #1
 8003252:	d10d      	bne.n	8003270 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	43da      	mvns	r2, r3
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	4013      	ands	r3, r2
 8003260:	b29b      	uxth	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	bf0c      	ite	eq
 8003266:	2301      	moveq	r3, #1
 8003268:	2300      	movne	r3, #0
 800326a:	b2db      	uxtb	r3, r3
 800326c:	461a      	mov	r2, r3
 800326e:	e00c      	b.n	800328a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	43da      	mvns	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	4013      	ands	r3, r2
 800327c:	b29b      	uxth	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	bf0c      	ite	eq
 8003282:	2301      	moveq	r3, #1
 8003284:	2300      	movne	r3, #0
 8003286:	b2db      	uxtb	r3, r3
 8003288:	461a      	mov	r2, r3
 800328a:	79fb      	ldrb	r3, [r7, #7]
 800328c:	429a      	cmp	r2, r3
 800328e:	d0b6      	beq.n	80031fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b084      	sub	sp, #16
 800329e:	af00      	add	r7, sp, #0
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
 80032a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032a8:	e051      	b.n	800334e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b8:	d123      	bne.n	8003302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2220      	movs	r2, #32
 80032de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f043 0204 	orr.w	r2, r3, #4
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e046      	b.n	8003390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003308:	d021      	beq.n	800334e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800330a:	f7fe fd91 	bl	8001e30 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	429a      	cmp	r2, r3
 8003318:	d302      	bcc.n	8003320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d116      	bne.n	800334e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	f043 0220 	orr.w	r2, r3, #32
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e020      	b.n	8003390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	0c1b      	lsrs	r3, r3, #16
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b01      	cmp	r3, #1
 8003356:	d10c      	bne.n	8003372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	43da      	mvns	r2, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	4013      	ands	r3, r2
 8003364:	b29b      	uxth	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	bf14      	ite	ne
 800336a:	2301      	movne	r3, #1
 800336c:	2300      	moveq	r3, #0
 800336e:	b2db      	uxtb	r3, r3
 8003370:	e00b      	b.n	800338a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	43da      	mvns	r2, r3
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	4013      	ands	r3, r2
 800337e:	b29b      	uxth	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	bf14      	ite	ne
 8003384:	2301      	movne	r3, #1
 8003386:	2300      	moveq	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d18d      	bne.n	80032aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033a4:	e02d      	b.n	8003402 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f8ce 	bl	8003548 <I2C_IsAcknowledgeFailed>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e02d      	b.n	8003412 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033bc:	d021      	beq.n	8003402 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033be:	f7fe fd37 	bl	8001e30 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d302      	bcc.n	80033d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d116      	bne.n	8003402 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2220      	movs	r2, #32
 80033de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	f043 0220 	orr.w	r2, r3, #32
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e007      	b.n	8003412 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340c:	2b80      	cmp	r3, #128	; 0x80
 800340e:	d1ca      	bne.n	80033a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b084      	sub	sp, #16
 800341e:	af00      	add	r7, sp, #0
 8003420:	60f8      	str	r0, [r7, #12]
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003426:	e02d      	b.n	8003484 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 f88d 	bl	8003548 <I2C_IsAcknowledgeFailed>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e02d      	b.n	8003494 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343e:	d021      	beq.n	8003484 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003440:	f7fe fcf6 	bl	8001e30 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	429a      	cmp	r2, r3
 800344e:	d302      	bcc.n	8003456 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d116      	bne.n	8003484 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2220      	movs	r2, #32
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	f043 0220 	orr.w	r2, r3, #32
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e007      	b.n	8003494 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b04      	cmp	r3, #4
 8003490:	d1ca      	bne.n	8003428 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034a8:	e042      	b.n	8003530 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	f003 0310 	and.w	r3, r3, #16
 80034b4:	2b10      	cmp	r3, #16
 80034b6:	d119      	bne.n	80034ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0210 	mvn.w	r2, #16
 80034c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e029      	b.n	8003540 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ec:	f7fe fca0 	bl	8001e30 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d302      	bcc.n	8003502 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d116      	bne.n	8003530 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	f043 0220 	orr.w	r2, r3, #32
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e007      	b.n	8003540 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353a:	2b40      	cmp	r3, #64	; 0x40
 800353c:	d1b5      	bne.n	80034aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800355e:	d11b      	bne.n	8003598 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003568:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	f043 0204 	orr.w	r2, r3, #4
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e000      	b.n	800359a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
	...

080035a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e267      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d075      	beq.n	80036b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035c6:	4b88      	ldr	r3, [pc, #544]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 030c 	and.w	r3, r3, #12
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d00c      	beq.n	80035ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035d2:	4b85      	ldr	r3, [pc, #532]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035da:	2b08      	cmp	r3, #8
 80035dc:	d112      	bne.n	8003604 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035de:	4b82      	ldr	r3, [pc, #520]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ea:	d10b      	bne.n	8003604 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ec:	4b7e      	ldr	r3, [pc, #504]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d05b      	beq.n	80036b0 <HAL_RCC_OscConfig+0x108>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d157      	bne.n	80036b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e242      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800360c:	d106      	bne.n	800361c <HAL_RCC_OscConfig+0x74>
 800360e:	4b76      	ldr	r3, [pc, #472]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a75      	ldr	r2, [pc, #468]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	e01d      	b.n	8003658 <HAL_RCC_OscConfig+0xb0>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003624:	d10c      	bne.n	8003640 <HAL_RCC_OscConfig+0x98>
 8003626:	4b70      	ldr	r3, [pc, #448]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a6f      	ldr	r2, [pc, #444]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 800362c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	4b6d      	ldr	r3, [pc, #436]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a6c      	ldr	r2, [pc, #432]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	e00b      	b.n	8003658 <HAL_RCC_OscConfig+0xb0>
 8003640:	4b69      	ldr	r3, [pc, #420]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a68      	ldr	r2, [pc, #416]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800364a:	6013      	str	r3, [r2, #0]
 800364c:	4b66      	ldr	r3, [pc, #408]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a65      	ldr	r2, [pc, #404]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d013      	beq.n	8003688 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003660:	f7fe fbe6 	bl	8001e30 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003668:	f7fe fbe2 	bl	8001e30 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b64      	cmp	r3, #100	; 0x64
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e207      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800367a:	4b5b      	ldr	r3, [pc, #364]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0f0      	beq.n	8003668 <HAL_RCC_OscConfig+0xc0>
 8003686:	e014      	b.n	80036b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003688:	f7fe fbd2 	bl	8001e30 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003690:	f7fe fbce 	bl	8001e30 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b64      	cmp	r3, #100	; 0x64
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e1f3      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036a2:	4b51      	ldr	r3, [pc, #324]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f0      	bne.n	8003690 <HAL_RCC_OscConfig+0xe8>
 80036ae:	e000      	b.n	80036b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d063      	beq.n	8003786 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036be:	4b4a      	ldr	r3, [pc, #296]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 030c 	and.w	r3, r3, #12
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00b      	beq.n	80036e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ca:	4b47      	ldr	r3, [pc, #284]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d11c      	bne.n	8003710 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036d6:	4b44      	ldr	r3, [pc, #272]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d116      	bne.n	8003710 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e2:	4b41      	ldr	r3, [pc, #260]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d005      	beq.n	80036fa <HAL_RCC_OscConfig+0x152>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d001      	beq.n	80036fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e1c7      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036fa:	4b3b      	ldr	r3, [pc, #236]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	4937      	ldr	r1, [pc, #220]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 800370a:	4313      	orrs	r3, r2
 800370c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800370e:	e03a      	b.n	8003786 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d020      	beq.n	800375a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003718:	4b34      	ldr	r3, [pc, #208]	; (80037ec <HAL_RCC_OscConfig+0x244>)
 800371a:	2201      	movs	r2, #1
 800371c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371e:	f7fe fb87 	bl	8001e30 <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003726:	f7fe fb83 	bl	8001e30 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e1a8      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003738:	4b2b      	ldr	r3, [pc, #172]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0f0      	beq.n	8003726 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003744:	4b28      	ldr	r3, [pc, #160]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4925      	ldr	r1, [pc, #148]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 8003754:	4313      	orrs	r3, r2
 8003756:	600b      	str	r3, [r1, #0]
 8003758:	e015      	b.n	8003786 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800375a:	4b24      	ldr	r3, [pc, #144]	; (80037ec <HAL_RCC_OscConfig+0x244>)
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003760:	f7fe fb66 	bl	8001e30 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003768:	f7fe fb62 	bl	8001e30 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e187      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800377a:	4b1b      	ldr	r3, [pc, #108]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b00      	cmp	r3, #0
 8003790:	d036      	beq.n	8003800 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d016      	beq.n	80037c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800379a:	4b15      	ldr	r3, [pc, #84]	; (80037f0 <HAL_RCC_OscConfig+0x248>)
 800379c:	2201      	movs	r2, #1
 800379e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a0:	f7fe fb46 	bl	8001e30 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037a8:	f7fe fb42 	bl	8001e30 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e167      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ba:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <HAL_RCC_OscConfig+0x240>)
 80037bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0f0      	beq.n	80037a8 <HAL_RCC_OscConfig+0x200>
 80037c6:	e01b      	b.n	8003800 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037c8:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <HAL_RCC_OscConfig+0x248>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ce:	f7fe fb2f 	bl	8001e30 <HAL_GetTick>
 80037d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d4:	e00e      	b.n	80037f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037d6:	f7fe fb2b 	bl	8001e30 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d907      	bls.n	80037f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e150      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
 80037e8:	40023800 	.word	0x40023800
 80037ec:	42470000 	.word	0x42470000
 80037f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f4:	4b88      	ldr	r3, [pc, #544]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80037f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1ea      	bne.n	80037d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 8097 	beq.w	800393c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800380e:	2300      	movs	r3, #0
 8003810:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003812:	4b81      	ldr	r3, [pc, #516]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10f      	bne.n	800383e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800381e:	2300      	movs	r3, #0
 8003820:	60bb      	str	r3, [r7, #8]
 8003822:	4b7d      	ldr	r3, [pc, #500]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	4a7c      	ldr	r2, [pc, #496]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800382c:	6413      	str	r3, [r2, #64]	; 0x40
 800382e:	4b7a      	ldr	r3, [pc, #488]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003836:	60bb      	str	r3, [r7, #8]
 8003838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800383a:	2301      	movs	r3, #1
 800383c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383e:	4b77      	ldr	r3, [pc, #476]	; (8003a1c <HAL_RCC_OscConfig+0x474>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003846:	2b00      	cmp	r3, #0
 8003848:	d118      	bne.n	800387c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800384a:	4b74      	ldr	r3, [pc, #464]	; (8003a1c <HAL_RCC_OscConfig+0x474>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a73      	ldr	r2, [pc, #460]	; (8003a1c <HAL_RCC_OscConfig+0x474>)
 8003850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003856:	f7fe faeb 	bl	8001e30 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800385c:	e008      	b.n	8003870 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800385e:	f7fe fae7 	bl	8001e30 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e10c      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003870:	4b6a      	ldr	r3, [pc, #424]	; (8003a1c <HAL_RCC_OscConfig+0x474>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0f0      	beq.n	800385e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d106      	bne.n	8003892 <HAL_RCC_OscConfig+0x2ea>
 8003884:	4b64      	ldr	r3, [pc, #400]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003888:	4a63      	ldr	r2, [pc, #396]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 800388a:	f043 0301 	orr.w	r3, r3, #1
 800388e:	6713      	str	r3, [r2, #112]	; 0x70
 8003890:	e01c      	b.n	80038cc <HAL_RCC_OscConfig+0x324>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b05      	cmp	r3, #5
 8003898:	d10c      	bne.n	80038b4 <HAL_RCC_OscConfig+0x30c>
 800389a:	4b5f      	ldr	r3, [pc, #380]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 800389c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389e:	4a5e      	ldr	r2, [pc, #376]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038a0:	f043 0304 	orr.w	r3, r3, #4
 80038a4:	6713      	str	r3, [r2, #112]	; 0x70
 80038a6:	4b5c      	ldr	r3, [pc, #368]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038aa:	4a5b      	ldr	r2, [pc, #364]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038ac:	f043 0301 	orr.w	r3, r3, #1
 80038b0:	6713      	str	r3, [r2, #112]	; 0x70
 80038b2:	e00b      	b.n	80038cc <HAL_RCC_OscConfig+0x324>
 80038b4:	4b58      	ldr	r3, [pc, #352]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b8:	4a57      	ldr	r2, [pc, #348]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038ba:	f023 0301 	bic.w	r3, r3, #1
 80038be:	6713      	str	r3, [r2, #112]	; 0x70
 80038c0:	4b55      	ldr	r3, [pc, #340]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c4:	4a54      	ldr	r2, [pc, #336]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038c6:	f023 0304 	bic.w	r3, r3, #4
 80038ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d015      	beq.n	8003900 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d4:	f7fe faac 	bl	8001e30 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038da:	e00a      	b.n	80038f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038dc:	f7fe faa8 	bl	8001e30 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e0cb      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f2:	4b49      	ldr	r3, [pc, #292]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0ee      	beq.n	80038dc <HAL_RCC_OscConfig+0x334>
 80038fe:	e014      	b.n	800392a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003900:	f7fe fa96 	bl	8001e30 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003906:	e00a      	b.n	800391e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003908:	f7fe fa92 	bl	8001e30 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	f241 3288 	movw	r2, #5000	; 0x1388
 8003916:	4293      	cmp	r3, r2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e0b5      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800391e:	4b3e      	ldr	r3, [pc, #248]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1ee      	bne.n	8003908 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800392a:	7dfb      	ldrb	r3, [r7, #23]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d105      	bne.n	800393c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003930:	4b39      	ldr	r3, [pc, #228]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	4a38      	ldr	r2, [pc, #224]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003936:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800393a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 80a1 	beq.w	8003a88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003946:	4b34      	ldr	r3, [pc, #208]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 030c 	and.w	r3, r3, #12
 800394e:	2b08      	cmp	r3, #8
 8003950:	d05c      	beq.n	8003a0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	2b02      	cmp	r3, #2
 8003958:	d141      	bne.n	80039de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800395a:	4b31      	ldr	r3, [pc, #196]	; (8003a20 <HAL_RCC_OscConfig+0x478>)
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003960:	f7fe fa66 	bl	8001e30 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003968:	f7fe fa62 	bl	8001e30 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e087      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800397a:	4b27      	ldr	r3, [pc, #156]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69da      	ldr	r2, [r3, #28]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	019b      	lsls	r3, r3, #6
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399c:	085b      	lsrs	r3, r3, #1
 800399e:	3b01      	subs	r3, #1
 80039a0:	041b      	lsls	r3, r3, #16
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	061b      	lsls	r3, r3, #24
 80039aa:	491b      	ldr	r1, [pc, #108]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039b0:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <HAL_RCC_OscConfig+0x478>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b6:	f7fe fa3b 	bl	8001e30 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039be:	f7fe fa37 	bl	8001e30 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e05c      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d0:	4b11      	ldr	r3, [pc, #68]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0f0      	beq.n	80039be <HAL_RCC_OscConfig+0x416>
 80039dc:	e054      	b.n	8003a88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039de:	4b10      	ldr	r3, [pc, #64]	; (8003a20 <HAL_RCC_OscConfig+0x478>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e4:	f7fe fa24 	bl	8001e30 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ec:	f7fe fa20 	bl	8001e30 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e045      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039fe:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <HAL_RCC_OscConfig+0x470>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f0      	bne.n	80039ec <HAL_RCC_OscConfig+0x444>
 8003a0a:	e03d      	b.n	8003a88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d107      	bne.n	8003a24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e038      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	40007000 	.word	0x40007000
 8003a20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a24:	4b1b      	ldr	r3, [pc, #108]	; (8003a94 <HAL_RCC_OscConfig+0x4ec>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d028      	beq.n	8003a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d121      	bne.n	8003a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d11a      	bne.n	8003a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a54:	4013      	ands	r3, r2
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d111      	bne.n	8003a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6a:	085b      	lsrs	r3, r3, #1
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d107      	bne.n	8003a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d001      	beq.n	8003a88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e000      	b.n	8003a8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3718      	adds	r7, #24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40023800 	.word	0x40023800

08003a98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0cc      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003aac:	4b68      	ldr	r3, [pc, #416]	; (8003c50 <HAL_RCC_ClockConfig+0x1b8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d90c      	bls.n	8003ad4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aba:	4b65      	ldr	r3, [pc, #404]	; (8003c50 <HAL_RCC_ClockConfig+0x1b8>)
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ac2:	4b63      	ldr	r3, [pc, #396]	; (8003c50 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d001      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e0b8      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d020      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aec:	4b59      	ldr	r3, [pc, #356]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	4a58      	ldr	r2, [pc, #352]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003af2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003af6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0308 	and.w	r3, r3, #8
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d005      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b04:	4b53      	ldr	r3, [pc, #332]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	4a52      	ldr	r2, [pc, #328]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b10:	4b50      	ldr	r3, [pc, #320]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	494d      	ldr	r1, [pc, #308]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d044      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d107      	bne.n	8003b46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b36:	4b47      	ldr	r3, [pc, #284]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d119      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e07f      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d003      	beq.n	8003b56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	d107      	bne.n	8003b66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b56:	4b3f      	ldr	r3, [pc, #252]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d109      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e06f      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b66:	4b3b      	ldr	r3, [pc, #236]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e067      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b76:	4b37      	ldr	r3, [pc, #220]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f023 0203 	bic.w	r2, r3, #3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	4934      	ldr	r1, [pc, #208]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b88:	f7fe f952 	bl	8001e30 <HAL_GetTick>
 8003b8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8e:	e00a      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b90:	f7fe f94e 	bl	8001e30 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e04f      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba6:	4b2b      	ldr	r3, [pc, #172]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 020c 	and.w	r2, r3, #12
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d1eb      	bne.n	8003b90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bb8:	4b25      	ldr	r3, [pc, #148]	; (8003c50 <HAL_RCC_ClockConfig+0x1b8>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d20c      	bcs.n	8003be0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc6:	4b22      	ldr	r3, [pc, #136]	; (8003c50 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bce:	4b20      	ldr	r3, [pc, #128]	; (8003c50 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d001      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e032      	b.n	8003c46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d008      	beq.n	8003bfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bec:	4b19      	ldr	r3, [pc, #100]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	4916      	ldr	r1, [pc, #88]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d009      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c0a:	4b12      	ldr	r3, [pc, #72]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	490e      	ldr	r1, [pc, #56]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c1e:	f000 f821 	bl	8003c64 <HAL_RCC_GetSysClockFreq>
 8003c22:	4602      	mov	r2, r0
 8003c24:	4b0b      	ldr	r3, [pc, #44]	; (8003c54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	091b      	lsrs	r3, r3, #4
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	490a      	ldr	r1, [pc, #40]	; (8003c58 <HAL_RCC_ClockConfig+0x1c0>)
 8003c30:	5ccb      	ldrb	r3, [r1, r3]
 8003c32:	fa22 f303 	lsr.w	r3, r2, r3
 8003c36:	4a09      	ldr	r2, [pc, #36]	; (8003c5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c3a:	4b09      	ldr	r3, [pc, #36]	; (8003c60 <HAL_RCC_ClockConfig+0x1c8>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fe f8b2 	bl	8001da8 <HAL_InitTick>

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40023c00 	.word	0x40023c00
 8003c54:	40023800 	.word	0x40023800
 8003c58:	08004d00 	.word	0x08004d00
 8003c5c:	20000000 	.word	0x20000000
 8003c60:	20000004 	.word	0x20000004

08003c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c68:	b090      	sub	sp, #64	; 0x40
 8003c6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c70:	2300      	movs	r3, #0
 8003c72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c74:	2300      	movs	r3, #0
 8003c76:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c7c:	4b59      	ldr	r3, [pc, #356]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 030c 	and.w	r3, r3, #12
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d00d      	beq.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x40>
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	f200 80a1 	bhi.w	8003dd0 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <HAL_RCC_GetSysClockFreq+0x34>
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d003      	beq.n	8003c9e <HAL_RCC_GetSysClockFreq+0x3a>
 8003c96:	e09b      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c98:	4b53      	ldr	r3, [pc, #332]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c9a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c9c:	e09b      	b.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c9e:	4b53      	ldr	r3, [pc, #332]	; (8003dec <HAL_RCC_GetSysClockFreq+0x188>)
 8003ca0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ca2:	e098      	b.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ca4:	4b4f      	ldr	r3, [pc, #316]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cae:	4b4d      	ldr	r3, [pc, #308]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d028      	beq.n	8003d0c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cba:	4b4a      	ldr	r3, [pc, #296]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	099b      	lsrs	r3, r3, #6
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	623b      	str	r3, [r7, #32]
 8003cc4:	627a      	str	r2, [r7, #36]	; 0x24
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4b47      	ldr	r3, [pc, #284]	; (8003dec <HAL_RCC_GetSysClockFreq+0x188>)
 8003cd0:	fb03 f201 	mul.w	r2, r3, r1
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	fb00 f303 	mul.w	r3, r0, r3
 8003cda:	4413      	add	r3, r2
 8003cdc:	4a43      	ldr	r2, [pc, #268]	; (8003dec <HAL_RCC_GetSysClockFreq+0x188>)
 8003cde:	fba0 1202 	umull	r1, r2, r0, r2
 8003ce2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ce4:	460a      	mov	r2, r1
 8003ce6:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cea:	4413      	add	r3, r2
 8003cec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	61bb      	str	r3, [r7, #24]
 8003cf4:	61fa      	str	r2, [r7, #28]
 8003cf6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cfa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003cfe:	f7fc ff27 	bl	8000b50 <__aeabi_uldivmod>
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	4613      	mov	r3, r2
 8003d08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d0a:	e053      	b.n	8003db4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d0c:	4b35      	ldr	r3, [pc, #212]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	099b      	lsrs	r3, r3, #6
 8003d12:	2200      	movs	r2, #0
 8003d14:	613b      	str	r3, [r7, #16]
 8003d16:	617a      	str	r2, [r7, #20]
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d1e:	f04f 0b00 	mov.w	fp, #0
 8003d22:	4652      	mov	r2, sl
 8003d24:	465b      	mov	r3, fp
 8003d26:	f04f 0000 	mov.w	r0, #0
 8003d2a:	f04f 0100 	mov.w	r1, #0
 8003d2e:	0159      	lsls	r1, r3, #5
 8003d30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d34:	0150      	lsls	r0, r2, #5
 8003d36:	4602      	mov	r2, r0
 8003d38:	460b      	mov	r3, r1
 8003d3a:	ebb2 080a 	subs.w	r8, r2, sl
 8003d3e:	eb63 090b 	sbc.w	r9, r3, fp
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	f04f 0300 	mov.w	r3, #0
 8003d4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d56:	ebb2 0408 	subs.w	r4, r2, r8
 8003d5a:	eb63 0509 	sbc.w	r5, r3, r9
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	f04f 0300 	mov.w	r3, #0
 8003d66:	00eb      	lsls	r3, r5, #3
 8003d68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d6c:	00e2      	lsls	r2, r4, #3
 8003d6e:	4614      	mov	r4, r2
 8003d70:	461d      	mov	r5, r3
 8003d72:	eb14 030a 	adds.w	r3, r4, sl
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	eb45 030b 	adc.w	r3, r5, fp
 8003d7c:	607b      	str	r3, [r7, #4]
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d8a:	4629      	mov	r1, r5
 8003d8c:	028b      	lsls	r3, r1, #10
 8003d8e:	4621      	mov	r1, r4
 8003d90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d94:	4621      	mov	r1, r4
 8003d96:	028a      	lsls	r2, r1, #10
 8003d98:	4610      	mov	r0, r2
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d9e:	2200      	movs	r2, #0
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	60fa      	str	r2, [r7, #12]
 8003da4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003da8:	f7fc fed2 	bl	8000b50 <__aeabi_uldivmod>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4613      	mov	r3, r2
 8003db2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003db4:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	0c1b      	lsrs	r3, r3, #16
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003dc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dcc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003dce:	e002      	b.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dd0:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003dd2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003dd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3740      	adds	r7, #64	; 0x40
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003de2:	bf00      	nop
 8003de4:	40023800 	.word	0x40023800
 8003de8:	00f42400 	.word	0x00f42400
 8003dec:	017d7840 	.word	0x017d7840

08003df0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003df4:	4b03      	ldr	r3, [pc, #12]	; (8003e04 <HAL_RCC_GetHCLKFreq+0x14>)
 8003df6:	681b      	ldr	r3, [r3, #0]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	20000000 	.word	0x20000000

08003e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e0c:	f7ff fff0 	bl	8003df0 <HAL_RCC_GetHCLKFreq>
 8003e10:	4602      	mov	r2, r0
 8003e12:	4b05      	ldr	r3, [pc, #20]	; (8003e28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	0a9b      	lsrs	r3, r3, #10
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	4903      	ldr	r1, [pc, #12]	; (8003e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e1e:	5ccb      	ldrb	r3, [r1, r3]
 8003e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	08004d10 	.word	0x08004d10

08003e30 <__errno>:
 8003e30:	4b01      	ldr	r3, [pc, #4]	; (8003e38 <__errno+0x8>)
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	2000000c 	.word	0x2000000c

08003e3c <__libc_init_array>:
 8003e3c:	b570      	push	{r4, r5, r6, lr}
 8003e3e:	4d0d      	ldr	r5, [pc, #52]	; (8003e74 <__libc_init_array+0x38>)
 8003e40:	4c0d      	ldr	r4, [pc, #52]	; (8003e78 <__libc_init_array+0x3c>)
 8003e42:	1b64      	subs	r4, r4, r5
 8003e44:	10a4      	asrs	r4, r4, #2
 8003e46:	2600      	movs	r6, #0
 8003e48:	42a6      	cmp	r6, r4
 8003e4a:	d109      	bne.n	8003e60 <__libc_init_array+0x24>
 8003e4c:	4d0b      	ldr	r5, [pc, #44]	; (8003e7c <__libc_init_array+0x40>)
 8003e4e:	4c0c      	ldr	r4, [pc, #48]	; (8003e80 <__libc_init_array+0x44>)
 8003e50:	f000 ff48 	bl	8004ce4 <_init>
 8003e54:	1b64      	subs	r4, r4, r5
 8003e56:	10a4      	asrs	r4, r4, #2
 8003e58:	2600      	movs	r6, #0
 8003e5a:	42a6      	cmp	r6, r4
 8003e5c:	d105      	bne.n	8003e6a <__libc_init_array+0x2e>
 8003e5e:	bd70      	pop	{r4, r5, r6, pc}
 8003e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e64:	4798      	blx	r3
 8003e66:	3601      	adds	r6, #1
 8003e68:	e7ee      	b.n	8003e48 <__libc_init_array+0xc>
 8003e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e6e:	4798      	blx	r3
 8003e70:	3601      	adds	r6, #1
 8003e72:	e7f2      	b.n	8003e5a <__libc_init_array+0x1e>
 8003e74:	08004d50 	.word	0x08004d50
 8003e78:	08004d50 	.word	0x08004d50
 8003e7c:	08004d50 	.word	0x08004d50
 8003e80:	08004d54 	.word	0x08004d54

08003e84 <memcpy>:
 8003e84:	440a      	add	r2, r1
 8003e86:	4291      	cmp	r1, r2
 8003e88:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e8c:	d100      	bne.n	8003e90 <memcpy+0xc>
 8003e8e:	4770      	bx	lr
 8003e90:	b510      	push	{r4, lr}
 8003e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e9a:	4291      	cmp	r1, r2
 8003e9c:	d1f9      	bne.n	8003e92 <memcpy+0xe>
 8003e9e:	bd10      	pop	{r4, pc}

08003ea0 <memset>:
 8003ea0:	4402      	add	r2, r0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d100      	bne.n	8003eaa <memset+0xa>
 8003ea8:	4770      	bx	lr
 8003eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8003eae:	e7f9      	b.n	8003ea4 <memset+0x4>

08003eb0 <pow>:
 8003eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb2:	ed2d 8b02 	vpush	{d8}
 8003eb6:	eeb0 8a40 	vmov.f32	s16, s0
 8003eba:	eef0 8a60 	vmov.f32	s17, s1
 8003ebe:	ec55 4b11 	vmov	r4, r5, d1
 8003ec2:	f000 f865 	bl	8003f90 <__ieee754_pow>
 8003ec6:	4622      	mov	r2, r4
 8003ec8:	462b      	mov	r3, r5
 8003eca:	4620      	mov	r0, r4
 8003ecc:	4629      	mov	r1, r5
 8003ece:	ec57 6b10 	vmov	r6, r7, d0
 8003ed2:	f7fc fdd7 	bl	8000a84 <__aeabi_dcmpun>
 8003ed6:	2800      	cmp	r0, #0
 8003ed8:	d13b      	bne.n	8003f52 <pow+0xa2>
 8003eda:	ec51 0b18 	vmov	r0, r1, d8
 8003ede:	2200      	movs	r2, #0
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f7fc fd9d 	bl	8000a20 <__aeabi_dcmpeq>
 8003ee6:	b1b8      	cbz	r0, 8003f18 <pow+0x68>
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2300      	movs	r3, #0
 8003eec:	4620      	mov	r0, r4
 8003eee:	4629      	mov	r1, r5
 8003ef0:	f7fc fd96 	bl	8000a20 <__aeabi_dcmpeq>
 8003ef4:	2800      	cmp	r0, #0
 8003ef6:	d146      	bne.n	8003f86 <pow+0xd6>
 8003ef8:	ec45 4b10 	vmov	d0, r4, r5
 8003efc:	f000 fe61 	bl	8004bc2 <finite>
 8003f00:	b338      	cbz	r0, 8003f52 <pow+0xa2>
 8003f02:	2200      	movs	r2, #0
 8003f04:	2300      	movs	r3, #0
 8003f06:	4620      	mov	r0, r4
 8003f08:	4629      	mov	r1, r5
 8003f0a:	f7fc fd93 	bl	8000a34 <__aeabi_dcmplt>
 8003f0e:	b300      	cbz	r0, 8003f52 <pow+0xa2>
 8003f10:	f7ff ff8e 	bl	8003e30 <__errno>
 8003f14:	2322      	movs	r3, #34	; 0x22
 8003f16:	e01b      	b.n	8003f50 <pow+0xa0>
 8003f18:	ec47 6b10 	vmov	d0, r6, r7
 8003f1c:	f000 fe51 	bl	8004bc2 <finite>
 8003f20:	b9e0      	cbnz	r0, 8003f5c <pow+0xac>
 8003f22:	eeb0 0a48 	vmov.f32	s0, s16
 8003f26:	eef0 0a68 	vmov.f32	s1, s17
 8003f2a:	f000 fe4a 	bl	8004bc2 <finite>
 8003f2e:	b1a8      	cbz	r0, 8003f5c <pow+0xac>
 8003f30:	ec45 4b10 	vmov	d0, r4, r5
 8003f34:	f000 fe45 	bl	8004bc2 <finite>
 8003f38:	b180      	cbz	r0, 8003f5c <pow+0xac>
 8003f3a:	4632      	mov	r2, r6
 8003f3c:	463b      	mov	r3, r7
 8003f3e:	4630      	mov	r0, r6
 8003f40:	4639      	mov	r1, r7
 8003f42:	f7fc fd9f 	bl	8000a84 <__aeabi_dcmpun>
 8003f46:	2800      	cmp	r0, #0
 8003f48:	d0e2      	beq.n	8003f10 <pow+0x60>
 8003f4a:	f7ff ff71 	bl	8003e30 <__errno>
 8003f4e:	2321      	movs	r3, #33	; 0x21
 8003f50:	6003      	str	r3, [r0, #0]
 8003f52:	ecbd 8b02 	vpop	{d8}
 8003f56:	ec47 6b10 	vmov	d0, r6, r7
 8003f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	2300      	movs	r3, #0
 8003f60:	4630      	mov	r0, r6
 8003f62:	4639      	mov	r1, r7
 8003f64:	f7fc fd5c 	bl	8000a20 <__aeabi_dcmpeq>
 8003f68:	2800      	cmp	r0, #0
 8003f6a:	d0f2      	beq.n	8003f52 <pow+0xa2>
 8003f6c:	eeb0 0a48 	vmov.f32	s0, s16
 8003f70:	eef0 0a68 	vmov.f32	s1, s17
 8003f74:	f000 fe25 	bl	8004bc2 <finite>
 8003f78:	2800      	cmp	r0, #0
 8003f7a:	d0ea      	beq.n	8003f52 <pow+0xa2>
 8003f7c:	ec45 4b10 	vmov	d0, r4, r5
 8003f80:	f000 fe1f 	bl	8004bc2 <finite>
 8003f84:	e7c3      	b.n	8003f0e <pow+0x5e>
 8003f86:	4f01      	ldr	r7, [pc, #4]	; (8003f8c <pow+0xdc>)
 8003f88:	2600      	movs	r6, #0
 8003f8a:	e7e2      	b.n	8003f52 <pow+0xa2>
 8003f8c:	3ff00000 	.word	0x3ff00000

08003f90 <__ieee754_pow>:
 8003f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f94:	ed2d 8b06 	vpush	{d8-d10}
 8003f98:	b089      	sub	sp, #36	; 0x24
 8003f9a:	ed8d 1b00 	vstr	d1, [sp]
 8003f9e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8003fa2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8003fa6:	ea58 0102 	orrs.w	r1, r8, r2
 8003faa:	ec57 6b10 	vmov	r6, r7, d0
 8003fae:	d115      	bne.n	8003fdc <__ieee754_pow+0x4c>
 8003fb0:	19b3      	adds	r3, r6, r6
 8003fb2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8003fb6:	4152      	adcs	r2, r2
 8003fb8:	4299      	cmp	r1, r3
 8003fba:	4b89      	ldr	r3, [pc, #548]	; (80041e0 <__ieee754_pow+0x250>)
 8003fbc:	4193      	sbcs	r3, r2
 8003fbe:	f080 84d2 	bcs.w	8004966 <__ieee754_pow+0x9d6>
 8003fc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003fc6:	4630      	mov	r0, r6
 8003fc8:	4639      	mov	r1, r7
 8003fca:	f7fc f90b 	bl	80001e4 <__adddf3>
 8003fce:	ec41 0b10 	vmov	d0, r0, r1
 8003fd2:	b009      	add	sp, #36	; 0x24
 8003fd4:	ecbd 8b06 	vpop	{d8-d10}
 8003fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fdc:	4b81      	ldr	r3, [pc, #516]	; (80041e4 <__ieee754_pow+0x254>)
 8003fde:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8003fe2:	429c      	cmp	r4, r3
 8003fe4:	ee10 aa10 	vmov	sl, s0
 8003fe8:	463d      	mov	r5, r7
 8003fea:	dc06      	bgt.n	8003ffa <__ieee754_pow+0x6a>
 8003fec:	d101      	bne.n	8003ff2 <__ieee754_pow+0x62>
 8003fee:	2e00      	cmp	r6, #0
 8003ff0:	d1e7      	bne.n	8003fc2 <__ieee754_pow+0x32>
 8003ff2:	4598      	cmp	r8, r3
 8003ff4:	dc01      	bgt.n	8003ffa <__ieee754_pow+0x6a>
 8003ff6:	d10f      	bne.n	8004018 <__ieee754_pow+0x88>
 8003ff8:	b172      	cbz	r2, 8004018 <__ieee754_pow+0x88>
 8003ffa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8003ffe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004002:	ea55 050a 	orrs.w	r5, r5, sl
 8004006:	d1dc      	bne.n	8003fc2 <__ieee754_pow+0x32>
 8004008:	e9dd 3200 	ldrd	r3, r2, [sp]
 800400c:	18db      	adds	r3, r3, r3
 800400e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004012:	4152      	adcs	r2, r2
 8004014:	429d      	cmp	r5, r3
 8004016:	e7d0      	b.n	8003fba <__ieee754_pow+0x2a>
 8004018:	2d00      	cmp	r5, #0
 800401a:	da3b      	bge.n	8004094 <__ieee754_pow+0x104>
 800401c:	4b72      	ldr	r3, [pc, #456]	; (80041e8 <__ieee754_pow+0x258>)
 800401e:	4598      	cmp	r8, r3
 8004020:	dc51      	bgt.n	80040c6 <__ieee754_pow+0x136>
 8004022:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004026:	4598      	cmp	r8, r3
 8004028:	f340 84ac 	ble.w	8004984 <__ieee754_pow+0x9f4>
 800402c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004030:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004034:	2b14      	cmp	r3, #20
 8004036:	dd0f      	ble.n	8004058 <__ieee754_pow+0xc8>
 8004038:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800403c:	fa22 f103 	lsr.w	r1, r2, r3
 8004040:	fa01 f303 	lsl.w	r3, r1, r3
 8004044:	4293      	cmp	r3, r2
 8004046:	f040 849d 	bne.w	8004984 <__ieee754_pow+0x9f4>
 800404a:	f001 0101 	and.w	r1, r1, #1
 800404e:	f1c1 0302 	rsb	r3, r1, #2
 8004052:	9304      	str	r3, [sp, #16]
 8004054:	b182      	cbz	r2, 8004078 <__ieee754_pow+0xe8>
 8004056:	e05f      	b.n	8004118 <__ieee754_pow+0x188>
 8004058:	2a00      	cmp	r2, #0
 800405a:	d15b      	bne.n	8004114 <__ieee754_pow+0x184>
 800405c:	f1c3 0314 	rsb	r3, r3, #20
 8004060:	fa48 f103 	asr.w	r1, r8, r3
 8004064:	fa01 f303 	lsl.w	r3, r1, r3
 8004068:	4543      	cmp	r3, r8
 800406a:	f040 8488 	bne.w	800497e <__ieee754_pow+0x9ee>
 800406e:	f001 0101 	and.w	r1, r1, #1
 8004072:	f1c1 0302 	rsb	r3, r1, #2
 8004076:	9304      	str	r3, [sp, #16]
 8004078:	4b5c      	ldr	r3, [pc, #368]	; (80041ec <__ieee754_pow+0x25c>)
 800407a:	4598      	cmp	r8, r3
 800407c:	d132      	bne.n	80040e4 <__ieee754_pow+0x154>
 800407e:	f1b9 0f00 	cmp.w	r9, #0
 8004082:	f280 8478 	bge.w	8004976 <__ieee754_pow+0x9e6>
 8004086:	4959      	ldr	r1, [pc, #356]	; (80041ec <__ieee754_pow+0x25c>)
 8004088:	4632      	mov	r2, r6
 800408a:	463b      	mov	r3, r7
 800408c:	2000      	movs	r0, #0
 800408e:	f7fc fb89 	bl	80007a4 <__aeabi_ddiv>
 8004092:	e79c      	b.n	8003fce <__ieee754_pow+0x3e>
 8004094:	2300      	movs	r3, #0
 8004096:	9304      	str	r3, [sp, #16]
 8004098:	2a00      	cmp	r2, #0
 800409a:	d13d      	bne.n	8004118 <__ieee754_pow+0x188>
 800409c:	4b51      	ldr	r3, [pc, #324]	; (80041e4 <__ieee754_pow+0x254>)
 800409e:	4598      	cmp	r8, r3
 80040a0:	d1ea      	bne.n	8004078 <__ieee754_pow+0xe8>
 80040a2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80040a6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80040aa:	ea53 030a 	orrs.w	r3, r3, sl
 80040ae:	f000 845a 	beq.w	8004966 <__ieee754_pow+0x9d6>
 80040b2:	4b4f      	ldr	r3, [pc, #316]	; (80041f0 <__ieee754_pow+0x260>)
 80040b4:	429c      	cmp	r4, r3
 80040b6:	dd08      	ble.n	80040ca <__ieee754_pow+0x13a>
 80040b8:	f1b9 0f00 	cmp.w	r9, #0
 80040bc:	f2c0 8457 	blt.w	800496e <__ieee754_pow+0x9de>
 80040c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80040c4:	e783      	b.n	8003fce <__ieee754_pow+0x3e>
 80040c6:	2302      	movs	r3, #2
 80040c8:	e7e5      	b.n	8004096 <__ieee754_pow+0x106>
 80040ca:	f1b9 0f00 	cmp.w	r9, #0
 80040ce:	f04f 0000 	mov.w	r0, #0
 80040d2:	f04f 0100 	mov.w	r1, #0
 80040d6:	f6bf af7a 	bge.w	8003fce <__ieee754_pow+0x3e>
 80040da:	e9dd 0300 	ldrd	r0, r3, [sp]
 80040de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80040e2:	e774      	b.n	8003fce <__ieee754_pow+0x3e>
 80040e4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80040e8:	d106      	bne.n	80040f8 <__ieee754_pow+0x168>
 80040ea:	4632      	mov	r2, r6
 80040ec:	463b      	mov	r3, r7
 80040ee:	4630      	mov	r0, r6
 80040f0:	4639      	mov	r1, r7
 80040f2:	f7fc fa2d 	bl	8000550 <__aeabi_dmul>
 80040f6:	e76a      	b.n	8003fce <__ieee754_pow+0x3e>
 80040f8:	4b3e      	ldr	r3, [pc, #248]	; (80041f4 <__ieee754_pow+0x264>)
 80040fa:	4599      	cmp	r9, r3
 80040fc:	d10c      	bne.n	8004118 <__ieee754_pow+0x188>
 80040fe:	2d00      	cmp	r5, #0
 8004100:	db0a      	blt.n	8004118 <__ieee754_pow+0x188>
 8004102:	ec47 6b10 	vmov	d0, r6, r7
 8004106:	b009      	add	sp, #36	; 0x24
 8004108:	ecbd 8b06 	vpop	{d8-d10}
 800410c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004110:	f000 bc6c 	b.w	80049ec <__ieee754_sqrt>
 8004114:	2300      	movs	r3, #0
 8004116:	9304      	str	r3, [sp, #16]
 8004118:	ec47 6b10 	vmov	d0, r6, r7
 800411c:	f000 fd48 	bl	8004bb0 <fabs>
 8004120:	ec51 0b10 	vmov	r0, r1, d0
 8004124:	f1ba 0f00 	cmp.w	sl, #0
 8004128:	d129      	bne.n	800417e <__ieee754_pow+0x1ee>
 800412a:	b124      	cbz	r4, 8004136 <__ieee754_pow+0x1a6>
 800412c:	4b2f      	ldr	r3, [pc, #188]	; (80041ec <__ieee754_pow+0x25c>)
 800412e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004132:	429a      	cmp	r2, r3
 8004134:	d123      	bne.n	800417e <__ieee754_pow+0x1ee>
 8004136:	f1b9 0f00 	cmp.w	r9, #0
 800413a:	da05      	bge.n	8004148 <__ieee754_pow+0x1b8>
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	2000      	movs	r0, #0
 8004142:	492a      	ldr	r1, [pc, #168]	; (80041ec <__ieee754_pow+0x25c>)
 8004144:	f7fc fb2e 	bl	80007a4 <__aeabi_ddiv>
 8004148:	2d00      	cmp	r5, #0
 800414a:	f6bf af40 	bge.w	8003fce <__ieee754_pow+0x3e>
 800414e:	9b04      	ldr	r3, [sp, #16]
 8004150:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004154:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004158:	4323      	orrs	r3, r4
 800415a:	d108      	bne.n	800416e <__ieee754_pow+0x1de>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	4610      	mov	r0, r2
 8004162:	4619      	mov	r1, r3
 8004164:	f7fc f83c 	bl	80001e0 <__aeabi_dsub>
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	e78f      	b.n	800408e <__ieee754_pow+0xfe>
 800416e:	9b04      	ldr	r3, [sp, #16]
 8004170:	2b01      	cmp	r3, #1
 8004172:	f47f af2c 	bne.w	8003fce <__ieee754_pow+0x3e>
 8004176:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800417a:	4619      	mov	r1, r3
 800417c:	e727      	b.n	8003fce <__ieee754_pow+0x3e>
 800417e:	0feb      	lsrs	r3, r5, #31
 8004180:	3b01      	subs	r3, #1
 8004182:	9306      	str	r3, [sp, #24]
 8004184:	9a06      	ldr	r2, [sp, #24]
 8004186:	9b04      	ldr	r3, [sp, #16]
 8004188:	4313      	orrs	r3, r2
 800418a:	d102      	bne.n	8004192 <__ieee754_pow+0x202>
 800418c:	4632      	mov	r2, r6
 800418e:	463b      	mov	r3, r7
 8004190:	e7e6      	b.n	8004160 <__ieee754_pow+0x1d0>
 8004192:	4b19      	ldr	r3, [pc, #100]	; (80041f8 <__ieee754_pow+0x268>)
 8004194:	4598      	cmp	r8, r3
 8004196:	f340 80fb 	ble.w	8004390 <__ieee754_pow+0x400>
 800419a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800419e:	4598      	cmp	r8, r3
 80041a0:	4b13      	ldr	r3, [pc, #76]	; (80041f0 <__ieee754_pow+0x260>)
 80041a2:	dd0c      	ble.n	80041be <__ieee754_pow+0x22e>
 80041a4:	429c      	cmp	r4, r3
 80041a6:	dc0f      	bgt.n	80041c8 <__ieee754_pow+0x238>
 80041a8:	f1b9 0f00 	cmp.w	r9, #0
 80041ac:	da0f      	bge.n	80041ce <__ieee754_pow+0x23e>
 80041ae:	2000      	movs	r0, #0
 80041b0:	b009      	add	sp, #36	; 0x24
 80041b2:	ecbd 8b06 	vpop	{d8-d10}
 80041b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ba:	f000 bcf0 	b.w	8004b9e <__math_oflow>
 80041be:	429c      	cmp	r4, r3
 80041c0:	dbf2      	blt.n	80041a8 <__ieee754_pow+0x218>
 80041c2:	4b0a      	ldr	r3, [pc, #40]	; (80041ec <__ieee754_pow+0x25c>)
 80041c4:	429c      	cmp	r4, r3
 80041c6:	dd19      	ble.n	80041fc <__ieee754_pow+0x26c>
 80041c8:	f1b9 0f00 	cmp.w	r9, #0
 80041cc:	dcef      	bgt.n	80041ae <__ieee754_pow+0x21e>
 80041ce:	2000      	movs	r0, #0
 80041d0:	b009      	add	sp, #36	; 0x24
 80041d2:	ecbd 8b06 	vpop	{d8-d10}
 80041d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041da:	f000 bcd7 	b.w	8004b8c <__math_uflow>
 80041de:	bf00      	nop
 80041e0:	fff00000 	.word	0xfff00000
 80041e4:	7ff00000 	.word	0x7ff00000
 80041e8:	433fffff 	.word	0x433fffff
 80041ec:	3ff00000 	.word	0x3ff00000
 80041f0:	3fefffff 	.word	0x3fefffff
 80041f4:	3fe00000 	.word	0x3fe00000
 80041f8:	41e00000 	.word	0x41e00000
 80041fc:	4b60      	ldr	r3, [pc, #384]	; (8004380 <__ieee754_pow+0x3f0>)
 80041fe:	2200      	movs	r2, #0
 8004200:	f7fb ffee 	bl	80001e0 <__aeabi_dsub>
 8004204:	a354      	add	r3, pc, #336	; (adr r3, 8004358 <__ieee754_pow+0x3c8>)
 8004206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420a:	4604      	mov	r4, r0
 800420c:	460d      	mov	r5, r1
 800420e:	f7fc f99f 	bl	8000550 <__aeabi_dmul>
 8004212:	a353      	add	r3, pc, #332	; (adr r3, 8004360 <__ieee754_pow+0x3d0>)
 8004214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004218:	4606      	mov	r6, r0
 800421a:	460f      	mov	r7, r1
 800421c:	4620      	mov	r0, r4
 800421e:	4629      	mov	r1, r5
 8004220:	f7fc f996 	bl	8000550 <__aeabi_dmul>
 8004224:	4b57      	ldr	r3, [pc, #348]	; (8004384 <__ieee754_pow+0x3f4>)
 8004226:	4682      	mov	sl, r0
 8004228:	468b      	mov	fp, r1
 800422a:	2200      	movs	r2, #0
 800422c:	4620      	mov	r0, r4
 800422e:	4629      	mov	r1, r5
 8004230:	f7fc f98e 	bl	8000550 <__aeabi_dmul>
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	a14b      	add	r1, pc, #300	; (adr r1, 8004368 <__ieee754_pow+0x3d8>)
 800423a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800423e:	f7fb ffcf 	bl	80001e0 <__aeabi_dsub>
 8004242:	4622      	mov	r2, r4
 8004244:	462b      	mov	r3, r5
 8004246:	f7fc f983 	bl	8000550 <__aeabi_dmul>
 800424a:	4602      	mov	r2, r0
 800424c:	460b      	mov	r3, r1
 800424e:	2000      	movs	r0, #0
 8004250:	494d      	ldr	r1, [pc, #308]	; (8004388 <__ieee754_pow+0x3f8>)
 8004252:	f7fb ffc5 	bl	80001e0 <__aeabi_dsub>
 8004256:	4622      	mov	r2, r4
 8004258:	4680      	mov	r8, r0
 800425a:	4689      	mov	r9, r1
 800425c:	462b      	mov	r3, r5
 800425e:	4620      	mov	r0, r4
 8004260:	4629      	mov	r1, r5
 8004262:	f7fc f975 	bl	8000550 <__aeabi_dmul>
 8004266:	4602      	mov	r2, r0
 8004268:	460b      	mov	r3, r1
 800426a:	4640      	mov	r0, r8
 800426c:	4649      	mov	r1, r9
 800426e:	f7fc f96f 	bl	8000550 <__aeabi_dmul>
 8004272:	a33f      	add	r3, pc, #252	; (adr r3, 8004370 <__ieee754_pow+0x3e0>)
 8004274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004278:	f7fc f96a 	bl	8000550 <__aeabi_dmul>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	4650      	mov	r0, sl
 8004282:	4659      	mov	r1, fp
 8004284:	f7fb ffac 	bl	80001e0 <__aeabi_dsub>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4680      	mov	r8, r0
 800428e:	4689      	mov	r9, r1
 8004290:	4630      	mov	r0, r6
 8004292:	4639      	mov	r1, r7
 8004294:	f7fb ffa6 	bl	80001e4 <__adddf3>
 8004298:	2000      	movs	r0, #0
 800429a:	4632      	mov	r2, r6
 800429c:	463b      	mov	r3, r7
 800429e:	4604      	mov	r4, r0
 80042a0:	460d      	mov	r5, r1
 80042a2:	f7fb ff9d 	bl	80001e0 <__aeabi_dsub>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	4640      	mov	r0, r8
 80042ac:	4649      	mov	r1, r9
 80042ae:	f7fb ff97 	bl	80001e0 <__aeabi_dsub>
 80042b2:	9b04      	ldr	r3, [sp, #16]
 80042b4:	9a06      	ldr	r2, [sp, #24]
 80042b6:	3b01      	subs	r3, #1
 80042b8:	4313      	orrs	r3, r2
 80042ba:	4682      	mov	sl, r0
 80042bc:	468b      	mov	fp, r1
 80042be:	f040 81e7 	bne.w	8004690 <__ieee754_pow+0x700>
 80042c2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8004378 <__ieee754_pow+0x3e8>
 80042c6:	eeb0 8a47 	vmov.f32	s16, s14
 80042ca:	eef0 8a67 	vmov.f32	s17, s15
 80042ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 80042d2:	2600      	movs	r6, #0
 80042d4:	4632      	mov	r2, r6
 80042d6:	463b      	mov	r3, r7
 80042d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80042dc:	f7fb ff80 	bl	80001e0 <__aeabi_dsub>
 80042e0:	4622      	mov	r2, r4
 80042e2:	462b      	mov	r3, r5
 80042e4:	f7fc f934 	bl	8000550 <__aeabi_dmul>
 80042e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80042ec:	4680      	mov	r8, r0
 80042ee:	4689      	mov	r9, r1
 80042f0:	4650      	mov	r0, sl
 80042f2:	4659      	mov	r1, fp
 80042f4:	f7fc f92c 	bl	8000550 <__aeabi_dmul>
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4640      	mov	r0, r8
 80042fe:	4649      	mov	r1, r9
 8004300:	f7fb ff70 	bl	80001e4 <__adddf3>
 8004304:	4632      	mov	r2, r6
 8004306:	463b      	mov	r3, r7
 8004308:	4680      	mov	r8, r0
 800430a:	4689      	mov	r9, r1
 800430c:	4620      	mov	r0, r4
 800430e:	4629      	mov	r1, r5
 8004310:	f7fc f91e 	bl	8000550 <__aeabi_dmul>
 8004314:	460b      	mov	r3, r1
 8004316:	4604      	mov	r4, r0
 8004318:	460d      	mov	r5, r1
 800431a:	4602      	mov	r2, r0
 800431c:	4649      	mov	r1, r9
 800431e:	4640      	mov	r0, r8
 8004320:	f7fb ff60 	bl	80001e4 <__adddf3>
 8004324:	4b19      	ldr	r3, [pc, #100]	; (800438c <__ieee754_pow+0x3fc>)
 8004326:	4299      	cmp	r1, r3
 8004328:	ec45 4b19 	vmov	d9, r4, r5
 800432c:	4606      	mov	r6, r0
 800432e:	460f      	mov	r7, r1
 8004330:	468b      	mov	fp, r1
 8004332:	f340 82f1 	ble.w	8004918 <__ieee754_pow+0x988>
 8004336:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800433a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800433e:	4303      	orrs	r3, r0
 8004340:	f000 81e4 	beq.w	800470c <__ieee754_pow+0x77c>
 8004344:	ec51 0b18 	vmov	r0, r1, d8
 8004348:	2200      	movs	r2, #0
 800434a:	2300      	movs	r3, #0
 800434c:	f7fc fb72 	bl	8000a34 <__aeabi_dcmplt>
 8004350:	3800      	subs	r0, #0
 8004352:	bf18      	it	ne
 8004354:	2001      	movne	r0, #1
 8004356:	e72b      	b.n	80041b0 <__ieee754_pow+0x220>
 8004358:	60000000 	.word	0x60000000
 800435c:	3ff71547 	.word	0x3ff71547
 8004360:	f85ddf44 	.word	0xf85ddf44
 8004364:	3e54ae0b 	.word	0x3e54ae0b
 8004368:	55555555 	.word	0x55555555
 800436c:	3fd55555 	.word	0x3fd55555
 8004370:	652b82fe 	.word	0x652b82fe
 8004374:	3ff71547 	.word	0x3ff71547
 8004378:	00000000 	.word	0x00000000
 800437c:	bff00000 	.word	0xbff00000
 8004380:	3ff00000 	.word	0x3ff00000
 8004384:	3fd00000 	.word	0x3fd00000
 8004388:	3fe00000 	.word	0x3fe00000
 800438c:	408fffff 	.word	0x408fffff
 8004390:	4bd5      	ldr	r3, [pc, #852]	; (80046e8 <__ieee754_pow+0x758>)
 8004392:	402b      	ands	r3, r5
 8004394:	2200      	movs	r2, #0
 8004396:	b92b      	cbnz	r3, 80043a4 <__ieee754_pow+0x414>
 8004398:	4bd4      	ldr	r3, [pc, #848]	; (80046ec <__ieee754_pow+0x75c>)
 800439a:	f7fc f8d9 	bl	8000550 <__aeabi_dmul>
 800439e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80043a2:	460c      	mov	r4, r1
 80043a4:	1523      	asrs	r3, r4, #20
 80043a6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80043aa:	4413      	add	r3, r2
 80043ac:	9305      	str	r3, [sp, #20]
 80043ae:	4bd0      	ldr	r3, [pc, #832]	; (80046f0 <__ieee754_pow+0x760>)
 80043b0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80043b4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80043b8:	429c      	cmp	r4, r3
 80043ba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80043be:	dd08      	ble.n	80043d2 <__ieee754_pow+0x442>
 80043c0:	4bcc      	ldr	r3, [pc, #816]	; (80046f4 <__ieee754_pow+0x764>)
 80043c2:	429c      	cmp	r4, r3
 80043c4:	f340 8162 	ble.w	800468c <__ieee754_pow+0x6fc>
 80043c8:	9b05      	ldr	r3, [sp, #20]
 80043ca:	3301      	adds	r3, #1
 80043cc:	9305      	str	r3, [sp, #20]
 80043ce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80043d2:	2400      	movs	r4, #0
 80043d4:	00e3      	lsls	r3, r4, #3
 80043d6:	9307      	str	r3, [sp, #28]
 80043d8:	4bc7      	ldr	r3, [pc, #796]	; (80046f8 <__ieee754_pow+0x768>)
 80043da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80043de:	ed93 7b00 	vldr	d7, [r3]
 80043e2:	4629      	mov	r1, r5
 80043e4:	ec53 2b17 	vmov	r2, r3, d7
 80043e8:	eeb0 9a47 	vmov.f32	s18, s14
 80043ec:	eef0 9a67 	vmov.f32	s19, s15
 80043f0:	4682      	mov	sl, r0
 80043f2:	f7fb fef5 	bl	80001e0 <__aeabi_dsub>
 80043f6:	4652      	mov	r2, sl
 80043f8:	4606      	mov	r6, r0
 80043fa:	460f      	mov	r7, r1
 80043fc:	462b      	mov	r3, r5
 80043fe:	ec51 0b19 	vmov	r0, r1, d9
 8004402:	f7fb feef 	bl	80001e4 <__adddf3>
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	2000      	movs	r0, #0
 800440c:	49bb      	ldr	r1, [pc, #748]	; (80046fc <__ieee754_pow+0x76c>)
 800440e:	f7fc f9c9 	bl	80007a4 <__aeabi_ddiv>
 8004412:	ec41 0b1a 	vmov	d10, r0, r1
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	4630      	mov	r0, r6
 800441c:	4639      	mov	r1, r7
 800441e:	f7fc f897 	bl	8000550 <__aeabi_dmul>
 8004422:	2300      	movs	r3, #0
 8004424:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004428:	9302      	str	r3, [sp, #8]
 800442a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800442e:	46ab      	mov	fp, r5
 8004430:	106d      	asrs	r5, r5, #1
 8004432:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004436:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800443a:	ec41 0b18 	vmov	d8, r0, r1
 800443e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8004442:	2200      	movs	r2, #0
 8004444:	4640      	mov	r0, r8
 8004446:	4649      	mov	r1, r9
 8004448:	4614      	mov	r4, r2
 800444a:	461d      	mov	r5, r3
 800444c:	f7fc f880 	bl	8000550 <__aeabi_dmul>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	4630      	mov	r0, r6
 8004456:	4639      	mov	r1, r7
 8004458:	f7fb fec2 	bl	80001e0 <__aeabi_dsub>
 800445c:	ec53 2b19 	vmov	r2, r3, d9
 8004460:	4606      	mov	r6, r0
 8004462:	460f      	mov	r7, r1
 8004464:	4620      	mov	r0, r4
 8004466:	4629      	mov	r1, r5
 8004468:	f7fb feba 	bl	80001e0 <__aeabi_dsub>
 800446c:	4602      	mov	r2, r0
 800446e:	460b      	mov	r3, r1
 8004470:	4650      	mov	r0, sl
 8004472:	4659      	mov	r1, fp
 8004474:	f7fb feb4 	bl	80001e0 <__aeabi_dsub>
 8004478:	4642      	mov	r2, r8
 800447a:	464b      	mov	r3, r9
 800447c:	f7fc f868 	bl	8000550 <__aeabi_dmul>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4630      	mov	r0, r6
 8004486:	4639      	mov	r1, r7
 8004488:	f7fb feaa 	bl	80001e0 <__aeabi_dsub>
 800448c:	ec53 2b1a 	vmov	r2, r3, d10
 8004490:	f7fc f85e 	bl	8000550 <__aeabi_dmul>
 8004494:	ec53 2b18 	vmov	r2, r3, d8
 8004498:	ec41 0b19 	vmov	d9, r0, r1
 800449c:	ec51 0b18 	vmov	r0, r1, d8
 80044a0:	f7fc f856 	bl	8000550 <__aeabi_dmul>
 80044a4:	a37c      	add	r3, pc, #496	; (adr r3, 8004698 <__ieee754_pow+0x708>)
 80044a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044aa:	4604      	mov	r4, r0
 80044ac:	460d      	mov	r5, r1
 80044ae:	f7fc f84f 	bl	8000550 <__aeabi_dmul>
 80044b2:	a37b      	add	r3, pc, #492	; (adr r3, 80046a0 <__ieee754_pow+0x710>)
 80044b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b8:	f7fb fe94 	bl	80001e4 <__adddf3>
 80044bc:	4622      	mov	r2, r4
 80044be:	462b      	mov	r3, r5
 80044c0:	f7fc f846 	bl	8000550 <__aeabi_dmul>
 80044c4:	a378      	add	r3, pc, #480	; (adr r3, 80046a8 <__ieee754_pow+0x718>)
 80044c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ca:	f7fb fe8b 	bl	80001e4 <__adddf3>
 80044ce:	4622      	mov	r2, r4
 80044d0:	462b      	mov	r3, r5
 80044d2:	f7fc f83d 	bl	8000550 <__aeabi_dmul>
 80044d6:	a376      	add	r3, pc, #472	; (adr r3, 80046b0 <__ieee754_pow+0x720>)
 80044d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044dc:	f7fb fe82 	bl	80001e4 <__adddf3>
 80044e0:	4622      	mov	r2, r4
 80044e2:	462b      	mov	r3, r5
 80044e4:	f7fc f834 	bl	8000550 <__aeabi_dmul>
 80044e8:	a373      	add	r3, pc, #460	; (adr r3, 80046b8 <__ieee754_pow+0x728>)
 80044ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ee:	f7fb fe79 	bl	80001e4 <__adddf3>
 80044f2:	4622      	mov	r2, r4
 80044f4:	462b      	mov	r3, r5
 80044f6:	f7fc f82b 	bl	8000550 <__aeabi_dmul>
 80044fa:	a371      	add	r3, pc, #452	; (adr r3, 80046c0 <__ieee754_pow+0x730>)
 80044fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004500:	f7fb fe70 	bl	80001e4 <__adddf3>
 8004504:	4622      	mov	r2, r4
 8004506:	4606      	mov	r6, r0
 8004508:	460f      	mov	r7, r1
 800450a:	462b      	mov	r3, r5
 800450c:	4620      	mov	r0, r4
 800450e:	4629      	mov	r1, r5
 8004510:	f7fc f81e 	bl	8000550 <__aeabi_dmul>
 8004514:	4602      	mov	r2, r0
 8004516:	460b      	mov	r3, r1
 8004518:	4630      	mov	r0, r6
 800451a:	4639      	mov	r1, r7
 800451c:	f7fc f818 	bl	8000550 <__aeabi_dmul>
 8004520:	4642      	mov	r2, r8
 8004522:	4604      	mov	r4, r0
 8004524:	460d      	mov	r5, r1
 8004526:	464b      	mov	r3, r9
 8004528:	ec51 0b18 	vmov	r0, r1, d8
 800452c:	f7fb fe5a 	bl	80001e4 <__adddf3>
 8004530:	ec53 2b19 	vmov	r2, r3, d9
 8004534:	f7fc f80c 	bl	8000550 <__aeabi_dmul>
 8004538:	4622      	mov	r2, r4
 800453a:	462b      	mov	r3, r5
 800453c:	f7fb fe52 	bl	80001e4 <__adddf3>
 8004540:	4642      	mov	r2, r8
 8004542:	4682      	mov	sl, r0
 8004544:	468b      	mov	fp, r1
 8004546:	464b      	mov	r3, r9
 8004548:	4640      	mov	r0, r8
 800454a:	4649      	mov	r1, r9
 800454c:	f7fc f800 	bl	8000550 <__aeabi_dmul>
 8004550:	4b6b      	ldr	r3, [pc, #428]	; (8004700 <__ieee754_pow+0x770>)
 8004552:	2200      	movs	r2, #0
 8004554:	4606      	mov	r6, r0
 8004556:	460f      	mov	r7, r1
 8004558:	f7fb fe44 	bl	80001e4 <__adddf3>
 800455c:	4652      	mov	r2, sl
 800455e:	465b      	mov	r3, fp
 8004560:	f7fb fe40 	bl	80001e4 <__adddf3>
 8004564:	2000      	movs	r0, #0
 8004566:	4604      	mov	r4, r0
 8004568:	460d      	mov	r5, r1
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	4640      	mov	r0, r8
 8004570:	4649      	mov	r1, r9
 8004572:	f7fb ffed 	bl	8000550 <__aeabi_dmul>
 8004576:	4b62      	ldr	r3, [pc, #392]	; (8004700 <__ieee754_pow+0x770>)
 8004578:	4680      	mov	r8, r0
 800457a:	4689      	mov	r9, r1
 800457c:	2200      	movs	r2, #0
 800457e:	4620      	mov	r0, r4
 8004580:	4629      	mov	r1, r5
 8004582:	f7fb fe2d 	bl	80001e0 <__aeabi_dsub>
 8004586:	4632      	mov	r2, r6
 8004588:	463b      	mov	r3, r7
 800458a:	f7fb fe29 	bl	80001e0 <__aeabi_dsub>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4650      	mov	r0, sl
 8004594:	4659      	mov	r1, fp
 8004596:	f7fb fe23 	bl	80001e0 <__aeabi_dsub>
 800459a:	ec53 2b18 	vmov	r2, r3, d8
 800459e:	f7fb ffd7 	bl	8000550 <__aeabi_dmul>
 80045a2:	4622      	mov	r2, r4
 80045a4:	4606      	mov	r6, r0
 80045a6:	460f      	mov	r7, r1
 80045a8:	462b      	mov	r3, r5
 80045aa:	ec51 0b19 	vmov	r0, r1, d9
 80045ae:	f7fb ffcf 	bl	8000550 <__aeabi_dmul>
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	4630      	mov	r0, r6
 80045b8:	4639      	mov	r1, r7
 80045ba:	f7fb fe13 	bl	80001e4 <__adddf3>
 80045be:	4606      	mov	r6, r0
 80045c0:	460f      	mov	r7, r1
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	4640      	mov	r0, r8
 80045c8:	4649      	mov	r1, r9
 80045ca:	f7fb fe0b 	bl	80001e4 <__adddf3>
 80045ce:	a33e      	add	r3, pc, #248	; (adr r3, 80046c8 <__ieee754_pow+0x738>)
 80045d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d4:	2000      	movs	r0, #0
 80045d6:	4604      	mov	r4, r0
 80045d8:	460d      	mov	r5, r1
 80045da:	f7fb ffb9 	bl	8000550 <__aeabi_dmul>
 80045de:	4642      	mov	r2, r8
 80045e0:	ec41 0b18 	vmov	d8, r0, r1
 80045e4:	464b      	mov	r3, r9
 80045e6:	4620      	mov	r0, r4
 80045e8:	4629      	mov	r1, r5
 80045ea:	f7fb fdf9 	bl	80001e0 <__aeabi_dsub>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4630      	mov	r0, r6
 80045f4:	4639      	mov	r1, r7
 80045f6:	f7fb fdf3 	bl	80001e0 <__aeabi_dsub>
 80045fa:	a335      	add	r3, pc, #212	; (adr r3, 80046d0 <__ieee754_pow+0x740>)
 80045fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004600:	f7fb ffa6 	bl	8000550 <__aeabi_dmul>
 8004604:	a334      	add	r3, pc, #208	; (adr r3, 80046d8 <__ieee754_pow+0x748>)
 8004606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460a:	4606      	mov	r6, r0
 800460c:	460f      	mov	r7, r1
 800460e:	4620      	mov	r0, r4
 8004610:	4629      	mov	r1, r5
 8004612:	f7fb ff9d 	bl	8000550 <__aeabi_dmul>
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	4630      	mov	r0, r6
 800461c:	4639      	mov	r1, r7
 800461e:	f7fb fde1 	bl	80001e4 <__adddf3>
 8004622:	9a07      	ldr	r2, [sp, #28]
 8004624:	4b37      	ldr	r3, [pc, #220]	; (8004704 <__ieee754_pow+0x774>)
 8004626:	4413      	add	r3, r2
 8004628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462c:	f7fb fdda 	bl	80001e4 <__adddf3>
 8004630:	4682      	mov	sl, r0
 8004632:	9805      	ldr	r0, [sp, #20]
 8004634:	468b      	mov	fp, r1
 8004636:	f7fb ff21 	bl	800047c <__aeabi_i2d>
 800463a:	9a07      	ldr	r2, [sp, #28]
 800463c:	4b32      	ldr	r3, [pc, #200]	; (8004708 <__ieee754_pow+0x778>)
 800463e:	4413      	add	r3, r2
 8004640:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004644:	4606      	mov	r6, r0
 8004646:	460f      	mov	r7, r1
 8004648:	4652      	mov	r2, sl
 800464a:	465b      	mov	r3, fp
 800464c:	ec51 0b18 	vmov	r0, r1, d8
 8004650:	f7fb fdc8 	bl	80001e4 <__adddf3>
 8004654:	4642      	mov	r2, r8
 8004656:	464b      	mov	r3, r9
 8004658:	f7fb fdc4 	bl	80001e4 <__adddf3>
 800465c:	4632      	mov	r2, r6
 800465e:	463b      	mov	r3, r7
 8004660:	f7fb fdc0 	bl	80001e4 <__adddf3>
 8004664:	2000      	movs	r0, #0
 8004666:	4632      	mov	r2, r6
 8004668:	463b      	mov	r3, r7
 800466a:	4604      	mov	r4, r0
 800466c:	460d      	mov	r5, r1
 800466e:	f7fb fdb7 	bl	80001e0 <__aeabi_dsub>
 8004672:	4642      	mov	r2, r8
 8004674:	464b      	mov	r3, r9
 8004676:	f7fb fdb3 	bl	80001e0 <__aeabi_dsub>
 800467a:	ec53 2b18 	vmov	r2, r3, d8
 800467e:	f7fb fdaf 	bl	80001e0 <__aeabi_dsub>
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	4650      	mov	r0, sl
 8004688:	4659      	mov	r1, fp
 800468a:	e610      	b.n	80042ae <__ieee754_pow+0x31e>
 800468c:	2401      	movs	r4, #1
 800468e:	e6a1      	b.n	80043d4 <__ieee754_pow+0x444>
 8004690:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80046e0 <__ieee754_pow+0x750>
 8004694:	e617      	b.n	80042c6 <__ieee754_pow+0x336>
 8004696:	bf00      	nop
 8004698:	4a454eef 	.word	0x4a454eef
 800469c:	3fca7e28 	.word	0x3fca7e28
 80046a0:	93c9db65 	.word	0x93c9db65
 80046a4:	3fcd864a 	.word	0x3fcd864a
 80046a8:	a91d4101 	.word	0xa91d4101
 80046ac:	3fd17460 	.word	0x3fd17460
 80046b0:	518f264d 	.word	0x518f264d
 80046b4:	3fd55555 	.word	0x3fd55555
 80046b8:	db6fabff 	.word	0xdb6fabff
 80046bc:	3fdb6db6 	.word	0x3fdb6db6
 80046c0:	33333303 	.word	0x33333303
 80046c4:	3fe33333 	.word	0x3fe33333
 80046c8:	e0000000 	.word	0xe0000000
 80046cc:	3feec709 	.word	0x3feec709
 80046d0:	dc3a03fd 	.word	0xdc3a03fd
 80046d4:	3feec709 	.word	0x3feec709
 80046d8:	145b01f5 	.word	0x145b01f5
 80046dc:	be3e2fe0 	.word	0xbe3e2fe0
 80046e0:	00000000 	.word	0x00000000
 80046e4:	3ff00000 	.word	0x3ff00000
 80046e8:	7ff00000 	.word	0x7ff00000
 80046ec:	43400000 	.word	0x43400000
 80046f0:	0003988e 	.word	0x0003988e
 80046f4:	000bb679 	.word	0x000bb679
 80046f8:	08004d18 	.word	0x08004d18
 80046fc:	3ff00000 	.word	0x3ff00000
 8004700:	40080000 	.word	0x40080000
 8004704:	08004d38 	.word	0x08004d38
 8004708:	08004d28 	.word	0x08004d28
 800470c:	a3b5      	add	r3, pc, #724	; (adr r3, 80049e4 <__ieee754_pow+0xa54>)
 800470e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004712:	4640      	mov	r0, r8
 8004714:	4649      	mov	r1, r9
 8004716:	f7fb fd65 	bl	80001e4 <__adddf3>
 800471a:	4622      	mov	r2, r4
 800471c:	ec41 0b1a 	vmov	d10, r0, r1
 8004720:	462b      	mov	r3, r5
 8004722:	4630      	mov	r0, r6
 8004724:	4639      	mov	r1, r7
 8004726:	f7fb fd5b 	bl	80001e0 <__aeabi_dsub>
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	ec51 0b1a 	vmov	r0, r1, d10
 8004732:	f7fc f99d 	bl	8000a70 <__aeabi_dcmpgt>
 8004736:	2800      	cmp	r0, #0
 8004738:	f47f ae04 	bne.w	8004344 <__ieee754_pow+0x3b4>
 800473c:	4aa4      	ldr	r2, [pc, #656]	; (80049d0 <__ieee754_pow+0xa40>)
 800473e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004742:	4293      	cmp	r3, r2
 8004744:	f340 8108 	ble.w	8004958 <__ieee754_pow+0x9c8>
 8004748:	151b      	asrs	r3, r3, #20
 800474a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800474e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004752:	fa4a f303 	asr.w	r3, sl, r3
 8004756:	445b      	add	r3, fp
 8004758:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800475c:	4e9d      	ldr	r6, [pc, #628]	; (80049d4 <__ieee754_pow+0xa44>)
 800475e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004762:	4116      	asrs	r6, r2
 8004764:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004768:	2000      	movs	r0, #0
 800476a:	ea23 0106 	bic.w	r1, r3, r6
 800476e:	f1c2 0214 	rsb	r2, r2, #20
 8004772:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004776:	fa4a fa02 	asr.w	sl, sl, r2
 800477a:	f1bb 0f00 	cmp.w	fp, #0
 800477e:	4602      	mov	r2, r0
 8004780:	460b      	mov	r3, r1
 8004782:	4620      	mov	r0, r4
 8004784:	4629      	mov	r1, r5
 8004786:	bfb8      	it	lt
 8004788:	f1ca 0a00 	rsblt	sl, sl, #0
 800478c:	f7fb fd28 	bl	80001e0 <__aeabi_dsub>
 8004790:	ec41 0b19 	vmov	d9, r0, r1
 8004794:	4642      	mov	r2, r8
 8004796:	464b      	mov	r3, r9
 8004798:	ec51 0b19 	vmov	r0, r1, d9
 800479c:	f7fb fd22 	bl	80001e4 <__adddf3>
 80047a0:	a37b      	add	r3, pc, #492	; (adr r3, 8004990 <__ieee754_pow+0xa00>)
 80047a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a6:	2000      	movs	r0, #0
 80047a8:	4604      	mov	r4, r0
 80047aa:	460d      	mov	r5, r1
 80047ac:	f7fb fed0 	bl	8000550 <__aeabi_dmul>
 80047b0:	ec53 2b19 	vmov	r2, r3, d9
 80047b4:	4606      	mov	r6, r0
 80047b6:	460f      	mov	r7, r1
 80047b8:	4620      	mov	r0, r4
 80047ba:	4629      	mov	r1, r5
 80047bc:	f7fb fd10 	bl	80001e0 <__aeabi_dsub>
 80047c0:	4602      	mov	r2, r0
 80047c2:	460b      	mov	r3, r1
 80047c4:	4640      	mov	r0, r8
 80047c6:	4649      	mov	r1, r9
 80047c8:	f7fb fd0a 	bl	80001e0 <__aeabi_dsub>
 80047cc:	a372      	add	r3, pc, #456	; (adr r3, 8004998 <__ieee754_pow+0xa08>)
 80047ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d2:	f7fb febd 	bl	8000550 <__aeabi_dmul>
 80047d6:	a372      	add	r3, pc, #456	; (adr r3, 80049a0 <__ieee754_pow+0xa10>)
 80047d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047dc:	4680      	mov	r8, r0
 80047de:	4689      	mov	r9, r1
 80047e0:	4620      	mov	r0, r4
 80047e2:	4629      	mov	r1, r5
 80047e4:	f7fb feb4 	bl	8000550 <__aeabi_dmul>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4640      	mov	r0, r8
 80047ee:	4649      	mov	r1, r9
 80047f0:	f7fb fcf8 	bl	80001e4 <__adddf3>
 80047f4:	4604      	mov	r4, r0
 80047f6:	460d      	mov	r5, r1
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	4630      	mov	r0, r6
 80047fe:	4639      	mov	r1, r7
 8004800:	f7fb fcf0 	bl	80001e4 <__adddf3>
 8004804:	4632      	mov	r2, r6
 8004806:	463b      	mov	r3, r7
 8004808:	4680      	mov	r8, r0
 800480a:	4689      	mov	r9, r1
 800480c:	f7fb fce8 	bl	80001e0 <__aeabi_dsub>
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	4620      	mov	r0, r4
 8004816:	4629      	mov	r1, r5
 8004818:	f7fb fce2 	bl	80001e0 <__aeabi_dsub>
 800481c:	4642      	mov	r2, r8
 800481e:	4606      	mov	r6, r0
 8004820:	460f      	mov	r7, r1
 8004822:	464b      	mov	r3, r9
 8004824:	4640      	mov	r0, r8
 8004826:	4649      	mov	r1, r9
 8004828:	f7fb fe92 	bl	8000550 <__aeabi_dmul>
 800482c:	a35e      	add	r3, pc, #376	; (adr r3, 80049a8 <__ieee754_pow+0xa18>)
 800482e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004832:	4604      	mov	r4, r0
 8004834:	460d      	mov	r5, r1
 8004836:	f7fb fe8b 	bl	8000550 <__aeabi_dmul>
 800483a:	a35d      	add	r3, pc, #372	; (adr r3, 80049b0 <__ieee754_pow+0xa20>)
 800483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004840:	f7fb fcce 	bl	80001e0 <__aeabi_dsub>
 8004844:	4622      	mov	r2, r4
 8004846:	462b      	mov	r3, r5
 8004848:	f7fb fe82 	bl	8000550 <__aeabi_dmul>
 800484c:	a35a      	add	r3, pc, #360	; (adr r3, 80049b8 <__ieee754_pow+0xa28>)
 800484e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004852:	f7fb fcc7 	bl	80001e4 <__adddf3>
 8004856:	4622      	mov	r2, r4
 8004858:	462b      	mov	r3, r5
 800485a:	f7fb fe79 	bl	8000550 <__aeabi_dmul>
 800485e:	a358      	add	r3, pc, #352	; (adr r3, 80049c0 <__ieee754_pow+0xa30>)
 8004860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004864:	f7fb fcbc 	bl	80001e0 <__aeabi_dsub>
 8004868:	4622      	mov	r2, r4
 800486a:	462b      	mov	r3, r5
 800486c:	f7fb fe70 	bl	8000550 <__aeabi_dmul>
 8004870:	a355      	add	r3, pc, #340	; (adr r3, 80049c8 <__ieee754_pow+0xa38>)
 8004872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004876:	f7fb fcb5 	bl	80001e4 <__adddf3>
 800487a:	4622      	mov	r2, r4
 800487c:	462b      	mov	r3, r5
 800487e:	f7fb fe67 	bl	8000550 <__aeabi_dmul>
 8004882:	4602      	mov	r2, r0
 8004884:	460b      	mov	r3, r1
 8004886:	4640      	mov	r0, r8
 8004888:	4649      	mov	r1, r9
 800488a:	f7fb fca9 	bl	80001e0 <__aeabi_dsub>
 800488e:	4604      	mov	r4, r0
 8004890:	460d      	mov	r5, r1
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	4640      	mov	r0, r8
 8004898:	4649      	mov	r1, r9
 800489a:	f7fb fe59 	bl	8000550 <__aeabi_dmul>
 800489e:	2200      	movs	r2, #0
 80048a0:	ec41 0b19 	vmov	d9, r0, r1
 80048a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80048a8:	4620      	mov	r0, r4
 80048aa:	4629      	mov	r1, r5
 80048ac:	f7fb fc98 	bl	80001e0 <__aeabi_dsub>
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	ec51 0b19 	vmov	r0, r1, d9
 80048b8:	f7fb ff74 	bl	80007a4 <__aeabi_ddiv>
 80048bc:	4632      	mov	r2, r6
 80048be:	4604      	mov	r4, r0
 80048c0:	460d      	mov	r5, r1
 80048c2:	463b      	mov	r3, r7
 80048c4:	4640      	mov	r0, r8
 80048c6:	4649      	mov	r1, r9
 80048c8:	f7fb fe42 	bl	8000550 <__aeabi_dmul>
 80048cc:	4632      	mov	r2, r6
 80048ce:	463b      	mov	r3, r7
 80048d0:	f7fb fc88 	bl	80001e4 <__adddf3>
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	4620      	mov	r0, r4
 80048da:	4629      	mov	r1, r5
 80048dc:	f7fb fc80 	bl	80001e0 <__aeabi_dsub>
 80048e0:	4642      	mov	r2, r8
 80048e2:	464b      	mov	r3, r9
 80048e4:	f7fb fc7c 	bl	80001e0 <__aeabi_dsub>
 80048e8:	460b      	mov	r3, r1
 80048ea:	4602      	mov	r2, r0
 80048ec:	493a      	ldr	r1, [pc, #232]	; (80049d8 <__ieee754_pow+0xa48>)
 80048ee:	2000      	movs	r0, #0
 80048f0:	f7fb fc76 	bl	80001e0 <__aeabi_dsub>
 80048f4:	ec41 0b10 	vmov	d0, r0, r1
 80048f8:	ee10 3a90 	vmov	r3, s1
 80048fc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8004900:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004904:	da2b      	bge.n	800495e <__ieee754_pow+0x9ce>
 8004906:	4650      	mov	r0, sl
 8004908:	f000 f966 	bl	8004bd8 <scalbn>
 800490c:	ec51 0b10 	vmov	r0, r1, d0
 8004910:	ec53 2b18 	vmov	r2, r3, d8
 8004914:	f7ff bbed 	b.w	80040f2 <__ieee754_pow+0x162>
 8004918:	4b30      	ldr	r3, [pc, #192]	; (80049dc <__ieee754_pow+0xa4c>)
 800491a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800491e:	429e      	cmp	r6, r3
 8004920:	f77f af0c 	ble.w	800473c <__ieee754_pow+0x7ac>
 8004924:	4b2e      	ldr	r3, [pc, #184]	; (80049e0 <__ieee754_pow+0xa50>)
 8004926:	440b      	add	r3, r1
 8004928:	4303      	orrs	r3, r0
 800492a:	d009      	beq.n	8004940 <__ieee754_pow+0x9b0>
 800492c:	ec51 0b18 	vmov	r0, r1, d8
 8004930:	2200      	movs	r2, #0
 8004932:	2300      	movs	r3, #0
 8004934:	f7fc f87e 	bl	8000a34 <__aeabi_dcmplt>
 8004938:	3800      	subs	r0, #0
 800493a:	bf18      	it	ne
 800493c:	2001      	movne	r0, #1
 800493e:	e447      	b.n	80041d0 <__ieee754_pow+0x240>
 8004940:	4622      	mov	r2, r4
 8004942:	462b      	mov	r3, r5
 8004944:	f7fb fc4c 	bl	80001e0 <__aeabi_dsub>
 8004948:	4642      	mov	r2, r8
 800494a:	464b      	mov	r3, r9
 800494c:	f7fc f886 	bl	8000a5c <__aeabi_dcmpge>
 8004950:	2800      	cmp	r0, #0
 8004952:	f43f aef3 	beq.w	800473c <__ieee754_pow+0x7ac>
 8004956:	e7e9      	b.n	800492c <__ieee754_pow+0x99c>
 8004958:	f04f 0a00 	mov.w	sl, #0
 800495c:	e71a      	b.n	8004794 <__ieee754_pow+0x804>
 800495e:	ec51 0b10 	vmov	r0, r1, d0
 8004962:	4619      	mov	r1, r3
 8004964:	e7d4      	b.n	8004910 <__ieee754_pow+0x980>
 8004966:	491c      	ldr	r1, [pc, #112]	; (80049d8 <__ieee754_pow+0xa48>)
 8004968:	2000      	movs	r0, #0
 800496a:	f7ff bb30 	b.w	8003fce <__ieee754_pow+0x3e>
 800496e:	2000      	movs	r0, #0
 8004970:	2100      	movs	r1, #0
 8004972:	f7ff bb2c 	b.w	8003fce <__ieee754_pow+0x3e>
 8004976:	4630      	mov	r0, r6
 8004978:	4639      	mov	r1, r7
 800497a:	f7ff bb28 	b.w	8003fce <__ieee754_pow+0x3e>
 800497e:	9204      	str	r2, [sp, #16]
 8004980:	f7ff bb7a 	b.w	8004078 <__ieee754_pow+0xe8>
 8004984:	2300      	movs	r3, #0
 8004986:	f7ff bb64 	b.w	8004052 <__ieee754_pow+0xc2>
 800498a:	bf00      	nop
 800498c:	f3af 8000 	nop.w
 8004990:	00000000 	.word	0x00000000
 8004994:	3fe62e43 	.word	0x3fe62e43
 8004998:	fefa39ef 	.word	0xfefa39ef
 800499c:	3fe62e42 	.word	0x3fe62e42
 80049a0:	0ca86c39 	.word	0x0ca86c39
 80049a4:	be205c61 	.word	0xbe205c61
 80049a8:	72bea4d0 	.word	0x72bea4d0
 80049ac:	3e663769 	.word	0x3e663769
 80049b0:	c5d26bf1 	.word	0xc5d26bf1
 80049b4:	3ebbbd41 	.word	0x3ebbbd41
 80049b8:	af25de2c 	.word	0xaf25de2c
 80049bc:	3f11566a 	.word	0x3f11566a
 80049c0:	16bebd93 	.word	0x16bebd93
 80049c4:	3f66c16c 	.word	0x3f66c16c
 80049c8:	5555553e 	.word	0x5555553e
 80049cc:	3fc55555 	.word	0x3fc55555
 80049d0:	3fe00000 	.word	0x3fe00000
 80049d4:	000fffff 	.word	0x000fffff
 80049d8:	3ff00000 	.word	0x3ff00000
 80049dc:	4090cbff 	.word	0x4090cbff
 80049e0:	3f6f3400 	.word	0x3f6f3400
 80049e4:	652b82fe 	.word	0x652b82fe
 80049e8:	3c971547 	.word	0x3c971547

080049ec <__ieee754_sqrt>:
 80049ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049f0:	ec55 4b10 	vmov	r4, r5, d0
 80049f4:	4e55      	ldr	r6, [pc, #340]	; (8004b4c <__ieee754_sqrt+0x160>)
 80049f6:	43ae      	bics	r6, r5
 80049f8:	ee10 0a10 	vmov	r0, s0
 80049fc:	ee10 3a10 	vmov	r3, s0
 8004a00:	462a      	mov	r2, r5
 8004a02:	4629      	mov	r1, r5
 8004a04:	d110      	bne.n	8004a28 <__ieee754_sqrt+0x3c>
 8004a06:	ee10 2a10 	vmov	r2, s0
 8004a0a:	462b      	mov	r3, r5
 8004a0c:	f7fb fda0 	bl	8000550 <__aeabi_dmul>
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4620      	mov	r0, r4
 8004a16:	4629      	mov	r1, r5
 8004a18:	f7fb fbe4 	bl	80001e4 <__adddf3>
 8004a1c:	4604      	mov	r4, r0
 8004a1e:	460d      	mov	r5, r1
 8004a20:	ec45 4b10 	vmov	d0, r4, r5
 8004a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a28:	2d00      	cmp	r5, #0
 8004a2a:	dc10      	bgt.n	8004a4e <__ieee754_sqrt+0x62>
 8004a2c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004a30:	4330      	orrs	r0, r6
 8004a32:	d0f5      	beq.n	8004a20 <__ieee754_sqrt+0x34>
 8004a34:	b15d      	cbz	r5, 8004a4e <__ieee754_sqrt+0x62>
 8004a36:	ee10 2a10 	vmov	r2, s0
 8004a3a:	462b      	mov	r3, r5
 8004a3c:	ee10 0a10 	vmov	r0, s0
 8004a40:	f7fb fbce 	bl	80001e0 <__aeabi_dsub>
 8004a44:	4602      	mov	r2, r0
 8004a46:	460b      	mov	r3, r1
 8004a48:	f7fb feac 	bl	80007a4 <__aeabi_ddiv>
 8004a4c:	e7e6      	b.n	8004a1c <__ieee754_sqrt+0x30>
 8004a4e:	1512      	asrs	r2, r2, #20
 8004a50:	d074      	beq.n	8004b3c <__ieee754_sqrt+0x150>
 8004a52:	07d4      	lsls	r4, r2, #31
 8004a54:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004a58:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8004a5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004a60:	bf5e      	ittt	pl
 8004a62:	0fda      	lsrpl	r2, r3, #31
 8004a64:	005b      	lslpl	r3, r3, #1
 8004a66:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8004a6a:	2400      	movs	r4, #0
 8004a6c:	0fda      	lsrs	r2, r3, #31
 8004a6e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004a72:	107f      	asrs	r7, r7, #1
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	2516      	movs	r5, #22
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004a7e:	1886      	adds	r6, r0, r2
 8004a80:	428e      	cmp	r6, r1
 8004a82:	bfde      	ittt	le
 8004a84:	1b89      	suble	r1, r1, r6
 8004a86:	18b0      	addle	r0, r6, r2
 8004a88:	18a4      	addle	r4, r4, r2
 8004a8a:	0049      	lsls	r1, r1, #1
 8004a8c:	3d01      	subs	r5, #1
 8004a8e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8004a92:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8004a96:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004a9a:	d1f0      	bne.n	8004a7e <__ieee754_sqrt+0x92>
 8004a9c:	462a      	mov	r2, r5
 8004a9e:	f04f 0e20 	mov.w	lr, #32
 8004aa2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004aa6:	4281      	cmp	r1, r0
 8004aa8:	eb06 0c05 	add.w	ip, r6, r5
 8004aac:	dc02      	bgt.n	8004ab4 <__ieee754_sqrt+0xc8>
 8004aae:	d113      	bne.n	8004ad8 <__ieee754_sqrt+0xec>
 8004ab0:	459c      	cmp	ip, r3
 8004ab2:	d811      	bhi.n	8004ad8 <__ieee754_sqrt+0xec>
 8004ab4:	f1bc 0f00 	cmp.w	ip, #0
 8004ab8:	eb0c 0506 	add.w	r5, ip, r6
 8004abc:	da43      	bge.n	8004b46 <__ieee754_sqrt+0x15a>
 8004abe:	2d00      	cmp	r5, #0
 8004ac0:	db41      	blt.n	8004b46 <__ieee754_sqrt+0x15a>
 8004ac2:	f100 0801 	add.w	r8, r0, #1
 8004ac6:	1a09      	subs	r1, r1, r0
 8004ac8:	459c      	cmp	ip, r3
 8004aca:	bf88      	it	hi
 8004acc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8004ad0:	eba3 030c 	sub.w	r3, r3, ip
 8004ad4:	4432      	add	r2, r6
 8004ad6:	4640      	mov	r0, r8
 8004ad8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8004adc:	f1be 0e01 	subs.w	lr, lr, #1
 8004ae0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8004ae4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004ae8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004aec:	d1db      	bne.n	8004aa6 <__ieee754_sqrt+0xba>
 8004aee:	430b      	orrs	r3, r1
 8004af0:	d006      	beq.n	8004b00 <__ieee754_sqrt+0x114>
 8004af2:	1c50      	adds	r0, r2, #1
 8004af4:	bf13      	iteet	ne
 8004af6:	3201      	addne	r2, #1
 8004af8:	3401      	addeq	r4, #1
 8004afa:	4672      	moveq	r2, lr
 8004afc:	f022 0201 	bicne.w	r2, r2, #1
 8004b00:	1063      	asrs	r3, r4, #1
 8004b02:	0852      	lsrs	r2, r2, #1
 8004b04:	07e1      	lsls	r1, r4, #31
 8004b06:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004b0a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004b0e:	bf48      	it	mi
 8004b10:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8004b14:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8004b18:	4614      	mov	r4, r2
 8004b1a:	e781      	b.n	8004a20 <__ieee754_sqrt+0x34>
 8004b1c:	0ad9      	lsrs	r1, r3, #11
 8004b1e:	3815      	subs	r0, #21
 8004b20:	055b      	lsls	r3, r3, #21
 8004b22:	2900      	cmp	r1, #0
 8004b24:	d0fa      	beq.n	8004b1c <__ieee754_sqrt+0x130>
 8004b26:	02cd      	lsls	r5, r1, #11
 8004b28:	d50a      	bpl.n	8004b40 <__ieee754_sqrt+0x154>
 8004b2a:	f1c2 0420 	rsb	r4, r2, #32
 8004b2e:	fa23 f404 	lsr.w	r4, r3, r4
 8004b32:	1e55      	subs	r5, r2, #1
 8004b34:	4093      	lsls	r3, r2
 8004b36:	4321      	orrs	r1, r4
 8004b38:	1b42      	subs	r2, r0, r5
 8004b3a:	e78a      	b.n	8004a52 <__ieee754_sqrt+0x66>
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	e7f0      	b.n	8004b22 <__ieee754_sqrt+0x136>
 8004b40:	0049      	lsls	r1, r1, #1
 8004b42:	3201      	adds	r2, #1
 8004b44:	e7ef      	b.n	8004b26 <__ieee754_sqrt+0x13a>
 8004b46:	4680      	mov	r8, r0
 8004b48:	e7bd      	b.n	8004ac6 <__ieee754_sqrt+0xda>
 8004b4a:	bf00      	nop
 8004b4c:	7ff00000 	.word	0x7ff00000

08004b50 <with_errno>:
 8004b50:	b570      	push	{r4, r5, r6, lr}
 8004b52:	4604      	mov	r4, r0
 8004b54:	460d      	mov	r5, r1
 8004b56:	4616      	mov	r6, r2
 8004b58:	f7ff f96a 	bl	8003e30 <__errno>
 8004b5c:	4629      	mov	r1, r5
 8004b5e:	6006      	str	r6, [r0, #0]
 8004b60:	4620      	mov	r0, r4
 8004b62:	bd70      	pop	{r4, r5, r6, pc}

08004b64 <xflow>:
 8004b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b66:	4614      	mov	r4, r2
 8004b68:	461d      	mov	r5, r3
 8004b6a:	b108      	cbz	r0, 8004b70 <xflow+0xc>
 8004b6c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004b70:	e9cd 2300 	strd	r2, r3, [sp]
 8004b74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b78:	4620      	mov	r0, r4
 8004b7a:	4629      	mov	r1, r5
 8004b7c:	f7fb fce8 	bl	8000550 <__aeabi_dmul>
 8004b80:	2222      	movs	r2, #34	; 0x22
 8004b82:	b003      	add	sp, #12
 8004b84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b88:	f7ff bfe2 	b.w	8004b50 <with_errno>

08004b8c <__math_uflow>:
 8004b8c:	b508      	push	{r3, lr}
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004b94:	f7ff ffe6 	bl	8004b64 <xflow>
 8004b98:	ec41 0b10 	vmov	d0, r0, r1
 8004b9c:	bd08      	pop	{r3, pc}

08004b9e <__math_oflow>:
 8004b9e:	b508      	push	{r3, lr}
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004ba6:	f7ff ffdd 	bl	8004b64 <xflow>
 8004baa:	ec41 0b10 	vmov	d0, r0, r1
 8004bae:	bd08      	pop	{r3, pc}

08004bb0 <fabs>:
 8004bb0:	ec51 0b10 	vmov	r0, r1, d0
 8004bb4:	ee10 2a10 	vmov	r2, s0
 8004bb8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004bbc:	ec43 2b10 	vmov	d0, r2, r3
 8004bc0:	4770      	bx	lr

08004bc2 <finite>:
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	ed8d 0b00 	vstr	d0, [sp]
 8004bc8:	9801      	ldr	r0, [sp, #4]
 8004bca:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8004bce:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004bd2:	0fc0      	lsrs	r0, r0, #31
 8004bd4:	b002      	add	sp, #8
 8004bd6:	4770      	bx	lr

08004bd8 <scalbn>:
 8004bd8:	b570      	push	{r4, r5, r6, lr}
 8004bda:	ec55 4b10 	vmov	r4, r5, d0
 8004bde:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004be2:	4606      	mov	r6, r0
 8004be4:	462b      	mov	r3, r5
 8004be6:	b99a      	cbnz	r2, 8004c10 <scalbn+0x38>
 8004be8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004bec:	4323      	orrs	r3, r4
 8004bee:	d036      	beq.n	8004c5e <scalbn+0x86>
 8004bf0:	4b39      	ldr	r3, [pc, #228]	; (8004cd8 <scalbn+0x100>)
 8004bf2:	4629      	mov	r1, r5
 8004bf4:	ee10 0a10 	vmov	r0, s0
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f7fb fca9 	bl	8000550 <__aeabi_dmul>
 8004bfe:	4b37      	ldr	r3, [pc, #220]	; (8004cdc <scalbn+0x104>)
 8004c00:	429e      	cmp	r6, r3
 8004c02:	4604      	mov	r4, r0
 8004c04:	460d      	mov	r5, r1
 8004c06:	da10      	bge.n	8004c2a <scalbn+0x52>
 8004c08:	a32b      	add	r3, pc, #172	; (adr r3, 8004cb8 <scalbn+0xe0>)
 8004c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0e:	e03a      	b.n	8004c86 <scalbn+0xae>
 8004c10:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004c14:	428a      	cmp	r2, r1
 8004c16:	d10c      	bne.n	8004c32 <scalbn+0x5a>
 8004c18:	ee10 2a10 	vmov	r2, s0
 8004c1c:	4620      	mov	r0, r4
 8004c1e:	4629      	mov	r1, r5
 8004c20:	f7fb fae0 	bl	80001e4 <__adddf3>
 8004c24:	4604      	mov	r4, r0
 8004c26:	460d      	mov	r5, r1
 8004c28:	e019      	b.n	8004c5e <scalbn+0x86>
 8004c2a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004c2e:	460b      	mov	r3, r1
 8004c30:	3a36      	subs	r2, #54	; 0x36
 8004c32:	4432      	add	r2, r6
 8004c34:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004c38:	428a      	cmp	r2, r1
 8004c3a:	dd08      	ble.n	8004c4e <scalbn+0x76>
 8004c3c:	2d00      	cmp	r5, #0
 8004c3e:	a120      	add	r1, pc, #128	; (adr r1, 8004cc0 <scalbn+0xe8>)
 8004c40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c44:	da1c      	bge.n	8004c80 <scalbn+0xa8>
 8004c46:	a120      	add	r1, pc, #128	; (adr r1, 8004cc8 <scalbn+0xf0>)
 8004c48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c4c:	e018      	b.n	8004c80 <scalbn+0xa8>
 8004c4e:	2a00      	cmp	r2, #0
 8004c50:	dd08      	ble.n	8004c64 <scalbn+0x8c>
 8004c52:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004c56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004c5a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004c5e:	ec45 4b10 	vmov	d0, r4, r5
 8004c62:	bd70      	pop	{r4, r5, r6, pc}
 8004c64:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004c68:	da19      	bge.n	8004c9e <scalbn+0xc6>
 8004c6a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004c6e:	429e      	cmp	r6, r3
 8004c70:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8004c74:	dd0a      	ble.n	8004c8c <scalbn+0xb4>
 8004c76:	a112      	add	r1, pc, #72	; (adr r1, 8004cc0 <scalbn+0xe8>)
 8004c78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1e2      	bne.n	8004c46 <scalbn+0x6e>
 8004c80:	a30f      	add	r3, pc, #60	; (adr r3, 8004cc0 <scalbn+0xe8>)
 8004c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c86:	f7fb fc63 	bl	8000550 <__aeabi_dmul>
 8004c8a:	e7cb      	b.n	8004c24 <scalbn+0x4c>
 8004c8c:	a10a      	add	r1, pc, #40	; (adr r1, 8004cb8 <scalbn+0xe0>)
 8004c8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d0b8      	beq.n	8004c08 <scalbn+0x30>
 8004c96:	a10e      	add	r1, pc, #56	; (adr r1, 8004cd0 <scalbn+0xf8>)
 8004c98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c9c:	e7b4      	b.n	8004c08 <scalbn+0x30>
 8004c9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004ca2:	3236      	adds	r2, #54	; 0x36
 8004ca4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004ca8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8004cac:	4620      	mov	r0, r4
 8004cae:	4b0c      	ldr	r3, [pc, #48]	; (8004ce0 <scalbn+0x108>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	e7e8      	b.n	8004c86 <scalbn+0xae>
 8004cb4:	f3af 8000 	nop.w
 8004cb8:	c2f8f359 	.word	0xc2f8f359
 8004cbc:	01a56e1f 	.word	0x01a56e1f
 8004cc0:	8800759c 	.word	0x8800759c
 8004cc4:	7e37e43c 	.word	0x7e37e43c
 8004cc8:	8800759c 	.word	0x8800759c
 8004ccc:	fe37e43c 	.word	0xfe37e43c
 8004cd0:	c2f8f359 	.word	0xc2f8f359
 8004cd4:	81a56e1f 	.word	0x81a56e1f
 8004cd8:	43500000 	.word	0x43500000
 8004cdc:	ffff3cb0 	.word	0xffff3cb0
 8004ce0:	3c900000 	.word	0x3c900000

08004ce4 <_init>:
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce6:	bf00      	nop
 8004ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cea:	bc08      	pop	{r3}
 8004cec:	469e      	mov	lr, r3
 8004cee:	4770      	bx	lr

08004cf0 <_fini>:
 8004cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf2:	bf00      	nop
 8004cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cf6:	bc08      	pop	{r3}
 8004cf8:	469e      	mov	lr, r3
 8004cfa:	4770      	bx	lr
